
1stproject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f8c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08002098  08002098  00012098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002110  08002110  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  08002110  08002110  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002110  08002110  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002110  08002110  00012110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002114  08002114  00012114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08002118  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000048  20000090  080021a8  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d8  080021a8  000200d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   000038c9  00000000  00000000  000200b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000011b7  00000000  00000000  00023982  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000004b0  00000000  00000000  00024b40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000003f8  00000000  00000000  00024ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017397  00000000  00000000  000253e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006434  00000000  00000000  0003c77f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080405  00000000  00000000  00042bb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c2fb8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001450  00000000  00000000  000c3008  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000090 	.word	0x20000090
 8000128:	00000000 	.word	0x00000000
 800012c:	08002080 	.word	0x08002080

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000094 	.word	0x20000094
 8000148:	08002080 	.word	0x08002080

0800014c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000152:	f000 fbfb 	bl	800094c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000156:	f000 f877 	bl	8000248 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800015a:	f000 f8bb 	bl	80002d4 <MX_GPIO_Init>
	/* USER CODE BEGIN 2 */
	Alcd_Init(&lcd1, 2, 16);
 800015e:	2210      	movs	r2, #16
 8000160:	2102      	movs	r1, #2
 8000162:	4831      	ldr	r0, [pc, #196]	; (8000228 <main+0xdc>)
 8000164:	f000 fab4 	bl	80006d0 <Alcd_Init>
	Alcd_PutAt(&lcd1, 1, 0, "kaim");
 8000168:	4830      	ldr	r0, [pc, #192]	; (800022c <main+0xe0>)
 800016a:	f000 fbd9 	bl	8000920 <Str_Len>
 800016e:	4603      	mov	r3, r0
 8000170:	b2db      	uxtb	r3, r3
 8000172:	9300      	str	r3, [sp, #0]
 8000174:	4b2d      	ldr	r3, [pc, #180]	; (800022c <main+0xe0>)
 8000176:	2200      	movs	r2, #0
 8000178:	2101      	movs	r1, #1
 800017a:	482b      	ldr	r0, [pc, #172]	; (8000228 <main+0xdc>)
 800017c:	f000 fb63 	bl	8000846 <Alcd_PutAt_n>
	Alcd_PutAt_n(&lcd1, 0, 0, "ramy", Str_Len("ramy"));
 8000180:	482b      	ldr	r0, [pc, #172]	; (8000230 <main+0xe4>)
 8000182:	f000 fbcd 	bl	8000920 <Str_Len>
 8000186:	4603      	mov	r3, r0
 8000188:	b2db      	uxtb	r3, r3
 800018a:	9300      	str	r3, [sp, #0]
 800018c:	4b28      	ldr	r3, [pc, #160]	; (8000230 <main+0xe4>)
 800018e:	2200      	movs	r2, #0
 8000190:	2100      	movs	r1, #0
 8000192:	4825      	ldr	r0, [pc, #148]	; (8000228 <main+0xdc>)
 8000194:	f000 fb57 	bl	8000846 <Alcd_PutAt_n>
	Alcd_Clear(&lcd1);
 8000198:	4823      	ldr	r0, [pc, #140]	; (8000228 <main+0xdc>)
 800019a:	f000 fb6d 	bl	8000878 <Alcd_Clear>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

			HAL_Delay(1000);
 800019e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001a2:	f000 fc35 	bl	8000a10 <HAL_Delay>
			SS++;
 80001a6:	4b23      	ldr	r3, [pc, #140]	; (8000234 <main+0xe8>)
 80001a8:	781b      	ldrb	r3, [r3, #0]
 80001aa:	3301      	adds	r3, #1
 80001ac:	b2da      	uxtb	r2, r3
 80001ae:	4b21      	ldr	r3, [pc, #132]	; (8000234 <main+0xe8>)
 80001b0:	701a      	strb	r2, [r3, #0]
		if (SS == 60) {
 80001b2:	4b20      	ldr	r3, [pc, #128]	; (8000234 <main+0xe8>)
 80001b4:	781b      	ldrb	r3, [r3, #0]
 80001b6:	2b3c      	cmp	r3, #60	; 0x3c
 80001b8:	d11c      	bne.n	80001f4 <main+0xa8>
			SS = 0;
 80001ba:	4b1e      	ldr	r3, [pc, #120]	; (8000234 <main+0xe8>)
 80001bc:	2200      	movs	r2, #0
 80001be:	701a      	strb	r2, [r3, #0]
			MM++;
 80001c0:	4b1d      	ldr	r3, [pc, #116]	; (8000238 <main+0xec>)
 80001c2:	781b      	ldrb	r3, [r3, #0]
 80001c4:	3301      	adds	r3, #1
 80001c6:	b2da      	uxtb	r2, r3
 80001c8:	4b1b      	ldr	r3, [pc, #108]	; (8000238 <main+0xec>)
 80001ca:	701a      	strb	r2, [r3, #0]
			if (MM >= 60) {
 80001cc:	4b1a      	ldr	r3, [pc, #104]	; (8000238 <main+0xec>)
 80001ce:	781b      	ldrb	r3, [r3, #0]
 80001d0:	2b3b      	cmp	r3, #59	; 0x3b
 80001d2:	d90f      	bls.n	80001f4 <main+0xa8>
				MM = 0;
 80001d4:	4b18      	ldr	r3, [pc, #96]	; (8000238 <main+0xec>)
 80001d6:	2200      	movs	r2, #0
 80001d8:	701a      	strb	r2, [r3, #0]
				HH++;
 80001da:	4b18      	ldr	r3, [pc, #96]	; (800023c <main+0xf0>)
 80001dc:	781b      	ldrb	r3, [r3, #0]
 80001de:	3301      	adds	r3, #1
 80001e0:	b2da      	uxtb	r2, r3
 80001e2:	4b16      	ldr	r3, [pc, #88]	; (800023c <main+0xf0>)
 80001e4:	701a      	strb	r2, [r3, #0]
				if (HH >= 12) {
 80001e6:	4b15      	ldr	r3, [pc, #84]	; (800023c <main+0xf0>)
 80001e8:	781b      	ldrb	r3, [r3, #0]
 80001ea:	2b0b      	cmp	r3, #11
 80001ec:	d902      	bls.n	80001f4 <main+0xa8>
					HH = 0;
 80001ee:	4b13      	ldr	r3, [pc, #76]	; (800023c <main+0xf0>)
 80001f0:	2200      	movs	r2, #0
 80001f2:	701a      	strb	r2, [r3, #0]
				}
			}
		}

		uint8_t Length = sprintf(str, "%02d:%02d:%02d", HH, MM, SS);
 80001f4:	4b11      	ldr	r3, [pc, #68]	; (800023c <main+0xf0>)
 80001f6:	781b      	ldrb	r3, [r3, #0]
 80001f8:	461a      	mov	r2, r3
 80001fa:	4b0f      	ldr	r3, [pc, #60]	; (8000238 <main+0xec>)
 80001fc:	781b      	ldrb	r3, [r3, #0]
 80001fe:	4619      	mov	r1, r3
 8000200:	4b0c      	ldr	r3, [pc, #48]	; (8000234 <main+0xe8>)
 8000202:	781b      	ldrb	r3, [r3, #0]
 8000204:	9300      	str	r3, [sp, #0]
 8000206:	460b      	mov	r3, r1
 8000208:	490d      	ldr	r1, [pc, #52]	; (8000240 <main+0xf4>)
 800020a:	480e      	ldr	r0, [pc, #56]	; (8000244 <main+0xf8>)
 800020c:	f001 fabe 	bl	800178c <siprintf>
 8000210:	4603      	mov	r3, r0
 8000212:	71fb      	strb	r3, [r7, #7]
		Alcd_PutAt_n(&lcd1, 0, 0, str, Length);		/* USER CODE BEGIN 3 */
 8000214:	79fb      	ldrb	r3, [r7, #7]
 8000216:	9300      	str	r3, [sp, #0]
 8000218:	4b0a      	ldr	r3, [pc, #40]	; (8000244 <main+0xf8>)
 800021a:	2200      	movs	r2, #0
 800021c:	2100      	movs	r1, #0
 800021e:	4802      	ldr	r0, [pc, #8]	; (8000228 <main+0xdc>)
 8000220:	f000 fb11 	bl	8000846 <Alcd_PutAt_n>
	while (1) {
 8000224:	e7bb      	b.n	800019e <main+0x52>
 8000226:	bf00      	nop
 8000228:	20000000 	.word	0x20000000
 800022c:	08002098 	.word	0x08002098
 8000230:	080020a0 	.word	0x080020a0
 8000234:	200000be 	.word	0x200000be
 8000238:	200000bd 	.word	0x200000bd
 800023c:	200000bc 	.word	0x200000bc
 8000240:	080020a8 	.word	0x080020a8
 8000244:	200000ac 	.word	0x200000ac

08000248 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000248:	b580      	push	{r7, lr}
 800024a:	b090      	sub	sp, #64	; 0x40
 800024c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800024e:	f107 0318 	add.w	r3, r7, #24
 8000252:	2228      	movs	r2, #40	; 0x28
 8000254:	2100      	movs	r1, #0
 8000256:	4618      	mov	r0, r3
 8000258:	f001 fa90 	bl	800177c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800025c:	1d3b      	adds	r3, r7, #4
 800025e:	2200      	movs	r2, #0
 8000260:	601a      	str	r2, [r3, #0]
 8000262:	605a      	str	r2, [r3, #4]
 8000264:	609a      	str	r2, [r3, #8]
 8000266:	60da      	str	r2, [r3, #12]
 8000268:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800026a:	2301      	movs	r3, #1
 800026c:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800026e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000272:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000274:	2300      	movs	r3, #0
 8000276:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000278:	2301      	movs	r3, #1
 800027a:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800027c:	2302      	movs	r3, #2
 800027e:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000280:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000284:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000286:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800028a:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800028c:	f107 0318 	add.w	r3, r7, #24
 8000290:	4618      	mov	r0, r3
 8000292:	f000 fe61 	bl	8000f58 <HAL_RCC_OscConfig>
 8000296:	4603      	mov	r3, r0
 8000298:	2b00      	cmp	r3, #0
 800029a:	d001      	beq.n	80002a0 <SystemClock_Config+0x58>
		Error_Handler();
 800029c:	f000 f83c 	bl	8000318 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80002a0:	230f      	movs	r3, #15
 80002a2:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002a4:	2302      	movs	r3, #2
 80002a6:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a8:	2300      	movs	r3, #0
 80002aa:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002b0:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002b2:	2300      	movs	r3, #0
 80002b4:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80002b6:	1d3b      	adds	r3, r7, #4
 80002b8:	2102      	movs	r1, #2
 80002ba:	4618      	mov	r0, r3
 80002bc:	f001 f8ce 	bl	800145c <HAL_RCC_ClockConfig>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d001      	beq.n	80002ca <SystemClock_Config+0x82>
		Error_Handler();
 80002c6:	f000 f827 	bl	8000318 <Error_Handler>
	}
}
 80002ca:	bf00      	nop
 80002cc:	3740      	adds	r7, #64	; 0x40
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}
	...

080002d4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80002d4:	b480      	push	{r7}
 80002d6:	b083      	sub	sp, #12
 80002d8:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80002da:	4b0e      	ldr	r3, [pc, #56]	; (8000314 <MX_GPIO_Init+0x40>)
 80002dc:	699b      	ldr	r3, [r3, #24]
 80002de:	4a0d      	ldr	r2, [pc, #52]	; (8000314 <MX_GPIO_Init+0x40>)
 80002e0:	f043 0320 	orr.w	r3, r3, #32
 80002e4:	6193      	str	r3, [r2, #24]
 80002e6:	4b0b      	ldr	r3, [pc, #44]	; (8000314 <MX_GPIO_Init+0x40>)
 80002e8:	699b      	ldr	r3, [r3, #24]
 80002ea:	f003 0320 	and.w	r3, r3, #32
 80002ee:	607b      	str	r3, [r7, #4]
 80002f0:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80002f2:	4b08      	ldr	r3, [pc, #32]	; (8000314 <MX_GPIO_Init+0x40>)
 80002f4:	699b      	ldr	r3, [r3, #24]
 80002f6:	4a07      	ldr	r2, [pc, #28]	; (8000314 <MX_GPIO_Init+0x40>)
 80002f8:	f043 0304 	orr.w	r3, r3, #4
 80002fc:	6193      	str	r3, [r2, #24]
 80002fe:	4b05      	ldr	r3, [pc, #20]	; (8000314 <MX_GPIO_Init+0x40>)
 8000300:	699b      	ldr	r3, [r3, #24]
 8000302:	f003 0304 	and.w	r3, r3, #4
 8000306:	603b      	str	r3, [r7, #0]
 8000308:	683b      	ldr	r3, [r7, #0]

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800030a:	bf00      	nop
 800030c:	370c      	adds	r7, #12
 800030e:	46bd      	mov	sp, r7
 8000310:	bc80      	pop	{r7}
 8000312:	4770      	bx	lr
 8000314:	40021000 	.word	0x40021000

08000318 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000318:	b480      	push	{r7}
 800031a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800031c:	b672      	cpsid	i
}
 800031e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000320:	e7fe      	b.n	8000320 <Error_Handler+0x8>
	...

08000324 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000324:	b480      	push	{r7}
 8000326:	b085      	sub	sp, #20
 8000328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800032a:	4b15      	ldr	r3, [pc, #84]	; (8000380 <HAL_MspInit+0x5c>)
 800032c:	699b      	ldr	r3, [r3, #24]
 800032e:	4a14      	ldr	r2, [pc, #80]	; (8000380 <HAL_MspInit+0x5c>)
 8000330:	f043 0301 	orr.w	r3, r3, #1
 8000334:	6193      	str	r3, [r2, #24]
 8000336:	4b12      	ldr	r3, [pc, #72]	; (8000380 <HAL_MspInit+0x5c>)
 8000338:	699b      	ldr	r3, [r3, #24]
 800033a:	f003 0301 	and.w	r3, r3, #1
 800033e:	60bb      	str	r3, [r7, #8]
 8000340:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000342:	4b0f      	ldr	r3, [pc, #60]	; (8000380 <HAL_MspInit+0x5c>)
 8000344:	69db      	ldr	r3, [r3, #28]
 8000346:	4a0e      	ldr	r2, [pc, #56]	; (8000380 <HAL_MspInit+0x5c>)
 8000348:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800034c:	61d3      	str	r3, [r2, #28]
 800034e:	4b0c      	ldr	r3, [pc, #48]	; (8000380 <HAL_MspInit+0x5c>)
 8000350:	69db      	ldr	r3, [r3, #28]
 8000352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000356:	607b      	str	r3, [r7, #4]
 8000358:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800035a:	4b0a      	ldr	r3, [pc, #40]	; (8000384 <HAL_MspInit+0x60>)
 800035c:	685b      	ldr	r3, [r3, #4]
 800035e:	60fb      	str	r3, [r7, #12]
 8000360:	68fb      	ldr	r3, [r7, #12]
 8000362:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000366:	60fb      	str	r3, [r7, #12]
 8000368:	68fb      	ldr	r3, [r7, #12]
 800036a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800036e:	60fb      	str	r3, [r7, #12]
 8000370:	4a04      	ldr	r2, [pc, #16]	; (8000384 <HAL_MspInit+0x60>)
 8000372:	68fb      	ldr	r3, [r7, #12]
 8000374:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000376:	bf00      	nop
 8000378:	3714      	adds	r7, #20
 800037a:	46bd      	mov	sp, r7
 800037c:	bc80      	pop	{r7}
 800037e:	4770      	bx	lr
 8000380:	40021000 	.word	0x40021000
 8000384:	40010000 	.word	0x40010000

08000388 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800038c:	e7fe      	b.n	800038c <NMI_Handler+0x4>

0800038e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800038e:	b480      	push	{r7}
 8000390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000392:	e7fe      	b.n	8000392 <HardFault_Handler+0x4>

08000394 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000394:	b480      	push	{r7}
 8000396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000398:	e7fe      	b.n	8000398 <MemManage_Handler+0x4>

0800039a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800039a:	b480      	push	{r7}
 800039c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800039e:	e7fe      	b.n	800039e <BusFault_Handler+0x4>

080003a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003a0:	b480      	push	{r7}
 80003a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003a4:	e7fe      	b.n	80003a4 <UsageFault_Handler+0x4>

080003a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003a6:	b480      	push	{r7}
 80003a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003aa:	bf00      	nop
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bc80      	pop	{r7}
 80003b0:	4770      	bx	lr

080003b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003b2:	b480      	push	{r7}
 80003b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003b6:	bf00      	nop
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bc80      	pop	{r7}
 80003bc:	4770      	bx	lr

080003be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003be:	b480      	push	{r7}
 80003c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003c2:	bf00      	nop
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bc80      	pop	{r7}
 80003c8:	4770      	bx	lr

080003ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003ca:	b580      	push	{r7, lr}
 80003cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003ce:	f000 fb03 	bl	80009d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003d2:	bf00      	nop
 80003d4:	bd80      	pop	{r7, pc}
	...

080003d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b086      	sub	sp, #24
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80003e0:	4a14      	ldr	r2, [pc, #80]	; (8000434 <_sbrk+0x5c>)
 80003e2:	4b15      	ldr	r3, [pc, #84]	; (8000438 <_sbrk+0x60>)
 80003e4:	1ad3      	subs	r3, r2, r3
 80003e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80003e8:	697b      	ldr	r3, [r7, #20]
 80003ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80003ec:	4b13      	ldr	r3, [pc, #76]	; (800043c <_sbrk+0x64>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d102      	bne.n	80003fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80003f4:	4b11      	ldr	r3, [pc, #68]	; (800043c <_sbrk+0x64>)
 80003f6:	4a12      	ldr	r2, [pc, #72]	; (8000440 <_sbrk+0x68>)
 80003f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80003fa:	4b10      	ldr	r3, [pc, #64]	; (800043c <_sbrk+0x64>)
 80003fc:	681a      	ldr	r2, [r3, #0]
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	4413      	add	r3, r2
 8000402:	693a      	ldr	r2, [r7, #16]
 8000404:	429a      	cmp	r2, r3
 8000406:	d207      	bcs.n	8000418 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000408:	f001 f98e 	bl	8001728 <__errno>
 800040c:	4603      	mov	r3, r0
 800040e:	220c      	movs	r2, #12
 8000410:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000412:	f04f 33ff 	mov.w	r3, #4294967295
 8000416:	e009      	b.n	800042c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000418:	4b08      	ldr	r3, [pc, #32]	; (800043c <_sbrk+0x64>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800041e:	4b07      	ldr	r3, [pc, #28]	; (800043c <_sbrk+0x64>)
 8000420:	681a      	ldr	r2, [r3, #0]
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	4413      	add	r3, r2
 8000426:	4a05      	ldr	r2, [pc, #20]	; (800043c <_sbrk+0x64>)
 8000428:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800042a:	68fb      	ldr	r3, [r7, #12]
}
 800042c:	4618      	mov	r0, r3
 800042e:	3718      	adds	r7, #24
 8000430:	46bd      	mov	sp, r7
 8000432:	bd80      	pop	{r7, pc}
 8000434:	20005000 	.word	0x20005000
 8000438:	00000400 	.word	0x00000400
 800043c:	200000c0 	.word	0x200000c0
 8000440:	200000d8 	.word	0x200000d8

08000444 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000444:	b480      	push	{r7}
 8000446:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000448:	bf00      	nop
 800044a:	46bd      	mov	sp, r7
 800044c:	bc80      	pop	{r7}
 800044e:	4770      	bx	lr

08000450 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000450:	f7ff fff8 	bl	8000444 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000454:	480b      	ldr	r0, [pc, #44]	; (8000484 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000456:	490c      	ldr	r1, [pc, #48]	; (8000488 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000458:	4a0c      	ldr	r2, [pc, #48]	; (800048c <LoopFillZerobss+0x16>)
  movs r3, #0
 800045a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800045c:	e002      	b.n	8000464 <LoopCopyDataInit>

0800045e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800045e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000460:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000462:	3304      	adds	r3, #4

08000464 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000464:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000466:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000468:	d3f9      	bcc.n	800045e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800046a:	4a09      	ldr	r2, [pc, #36]	; (8000490 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800046c:	4c09      	ldr	r4, [pc, #36]	; (8000494 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800046e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000470:	e001      	b.n	8000476 <LoopFillZerobss>

08000472 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000472:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000474:	3204      	adds	r2, #4

08000476 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000476:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000478:	d3fb      	bcc.n	8000472 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800047a:	f001 f95b 	bl	8001734 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800047e:	f7ff fe65 	bl	800014c <main>
  bx lr
 8000482:	4770      	bx	lr
  ldr r0, =_sdata
 8000484:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000488:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 800048c:	08002118 	.word	0x08002118
  ldr r2, =_sbss
 8000490:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000494:	200000d8 	.word	0x200000d8

08000498 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000498:	e7fe      	b.n	8000498 <ADC1_2_IRQHandler>
	...

0800049c <DWT_Delay_Init>:
 * @brief  Initializes DWT_Clock_Cycle_Count for DWT_Delay_us function
 * @return Error DWT counter
 *         1: clock cycle counter not started
 *         0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void) {
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80004a0:	4b14      	ldr	r3, [pc, #80]	; (80004f4 <DWT_Delay_Init+0x58>)
 80004a2:	68db      	ldr	r3, [r3, #12]
 80004a4:	4a13      	ldr	r2, [pc, #76]	; (80004f4 <DWT_Delay_Init+0x58>)
 80004a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80004aa:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80004ac:	4b11      	ldr	r3, [pc, #68]	; (80004f4 <DWT_Delay_Init+0x58>)
 80004ae:	68db      	ldr	r3, [r3, #12]
 80004b0:	4a10      	ldr	r2, [pc, #64]	; (80004f4 <DWT_Delay_Init+0x58>)
 80004b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80004b6:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80004b8:	4b0f      	ldr	r3, [pc, #60]	; (80004f8 <DWT_Delay_Init+0x5c>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	4a0e      	ldr	r2, [pc, #56]	; (80004f8 <DWT_Delay_Init+0x5c>)
 80004be:	f023 0301 	bic.w	r3, r3, #1
 80004c2:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80004c4:	4b0c      	ldr	r3, [pc, #48]	; (80004f8 <DWT_Delay_Init+0x5c>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	4a0b      	ldr	r2, [pc, #44]	; (80004f8 <DWT_Delay_Init+0x5c>)
 80004ca:	f043 0301 	orr.w	r3, r3, #1
 80004ce:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 80004d0:	4b09      	ldr	r3, [pc, #36]	; (80004f8 <DWT_Delay_Init+0x5c>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 80004d6:	bf00      	nop
     __ASM volatile ("NOP");
 80004d8:	bf00      	nop
  __ASM volatile ("NOP");
 80004da:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 80004dc:	4b06      	ldr	r3, [pc, #24]	; (80004f8 <DWT_Delay_Init+0x5c>)
 80004de:	685b      	ldr	r3, [r3, #4]
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d001      	beq.n	80004e8 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 80004e4:	2300      	movs	r3, #0
 80004e6:	e000      	b.n	80004ea <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 80004e8:	2301      	movs	r3, #1
  }
}
 80004ea:	4618      	mov	r0, r3
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bc80      	pop	{r7}
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop
 80004f4:	e000edf0 	.word	0xe000edf0
 80004f8:	e0001000 	.word	0xe0001000

080004fc <DWT_Delay_us>:

/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds) {
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b084      	sub	sp, #16
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
	uint32_t clk_cycle_start = DWT->CYCCNT;
 8000504:	4b0d      	ldr	r3, [pc, #52]	; (800053c <DWT_Delay_us+0x40>)
 8000506:	685b      	ldr	r3, [r3, #4]
 8000508:	60fb      	str	r3, [r7, #12]

	/* Go to number of cycles for system */
	microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 800050a:	f001 f8e5 	bl	80016d8 <HAL_RCC_GetHCLKFreq>
 800050e:	4603      	mov	r3, r0
 8000510:	4a0b      	ldr	r2, [pc, #44]	; (8000540 <DWT_Delay_us+0x44>)
 8000512:	fba2 2303 	umull	r2, r3, r2, r3
 8000516:	0c9b      	lsrs	r3, r3, #18
 8000518:	687a      	ldr	r2, [r7, #4]
 800051a:	fb02 f303 	mul.w	r3, r2, r3
 800051e:	607b      	str	r3, [r7, #4]

	/* Delay till end */
	while ((DWT->CYCCNT - clk_cycle_start) < microseconds)
 8000520:	bf00      	nop
 8000522:	4b06      	ldr	r3, [pc, #24]	; (800053c <DWT_Delay_us+0x40>)
 8000524:	685a      	ldr	r2, [r3, #4]
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	1ad2      	subs	r2, r2, r3
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	429a      	cmp	r2, r3
 800052e:	d3f8      	bcc.n	8000522 <DWT_Delay_us+0x26>
		;
}
 8000530:	bf00      	nop
 8000532:	bf00      	nop
 8000534:	3710      	adds	r7, #16
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	e0001000 	.word	0xe0001000
 8000540:	431bde83 	.word	0x431bde83

08000544 <usDelay>:
    usDelay(100); \
  } while (0)

/* Hardware interface functions */
static void usDelay(uint16_t delay_us)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	4603      	mov	r3, r0
 800054c:	80fb      	strh	r3, [r7, #6]
	DWT_Delay_us(delay_us);
 800054e:	88fb      	ldrh	r3, [r7, #6]
 8000550:	4618      	mov	r0, r3
 8000552:	f7ff ffd3 	bl	80004fc <DWT_Delay_us>
}
 8000556:	bf00      	nop
 8000558:	3708      	adds	r7, #8
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}

0800055e <Write_HalfByte>:
/// the top 4 bits are ignored
/// transfers the status of the 4-bit data to the hardware GPIO pins
static void Write_HalfByte(Alcd_t *lcd, uint8_t HalfByte)
{
 800055e:	b480      	push	{r7}
 8000560:	b083      	sub	sp, #12
 8000562:	af00      	add	r7, sp, #0
 8000564:	6078      	str	r0, [r7, #4]
 8000566:	460b      	mov	r3, r1
 8000568:	70fb      	strb	r3, [r7, #3]
	lcd->Data_GPIO->ODR &= ~(0xf << lcd->Data_GPIO_Start_Pin);
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	685b      	ldr	r3, [r3, #4]
 800056e:	68da      	ldr	r2, [r3, #12]
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	7a1b      	ldrb	r3, [r3, #8]
 8000574:	4619      	mov	r1, r3
 8000576:	230f      	movs	r3, #15
 8000578:	408b      	lsls	r3, r1
 800057a:	43db      	mvns	r3, r3
 800057c:	4619      	mov	r1, r3
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	685b      	ldr	r3, [r3, #4]
 8000582:	400a      	ands	r2, r1
 8000584:	60da      	str	r2, [r3, #12]
	lcd->Data_GPIO->ODR |= HalfByte << lcd->Data_GPIO_Start_Pin;
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	685b      	ldr	r3, [r3, #4]
 800058a:	68da      	ldr	r2, [r3, #12]
 800058c:	78fb      	ldrb	r3, [r7, #3]
 800058e:	6879      	ldr	r1, [r7, #4]
 8000590:	7a09      	ldrb	r1, [r1, #8]
 8000592:	408b      	lsls	r3, r1
 8000594:	4619      	mov	r1, r3
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	685b      	ldr	r3, [r3, #4]
 800059a:	430a      	orrs	r2, r1
 800059c:	60da      	str	r2, [r3, #12]
}
 800059e:	bf00      	nop
 80005a0:	370c      	adds	r7, #12
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bc80      	pop	{r7}
 80005a6:	4770      	bx	lr

080005a8 <RS_SET>:
/// @brief 1 for set and 0 for reset
static void RS_SET(Alcd_t *lcd, uint8_t R_S_Stat)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
 80005b0:	460b      	mov	r3, r1
 80005b2:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->RS_GPIO, lcd->RS_GPIO_Pin, R_S_Stat);
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	6958      	ldr	r0, [r3, #20]
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	8b1b      	ldrh	r3, [r3, #24]
 80005bc:	78fa      	ldrb	r2, [r7, #3]
 80005be:	4619      	mov	r1, r3
 80005c0:	f000 fcb2 	bl	8000f28 <HAL_GPIO_WritePin>
}
 80005c4:	bf00      	nop
 80005c6:	3708      	adds	r7, #8
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}

080005cc <EN_SET>:
/// @brief 1 for set and 0 for reset
static void EN_SET(Alcd_t *lcd, uint8_t EN_Stat)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
 80005d4:	460b      	mov	r3, r1
 80005d6:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->EN_GPIO, lcd->EN_GPIO_Pin, EN_Stat);
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	68d8      	ldr	r0, [r3, #12]
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	8a1b      	ldrh	r3, [r3, #16]
 80005e0:	78fa      	ldrb	r2, [r7, #3]
 80005e2:	4619      	mov	r1, r3
 80005e4:	f000 fca0 	bl	8000f28 <HAL_GPIO_WritePin>
}
 80005e8:	bf00      	nop
 80005ea:	3708      	adds	r7, #8
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <Alcd_Init_GPIO>:

static void Alcd_Init_GPIO(Alcd_t *lcd)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b086      	sub	sp, #24
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef G =
 80005f8:	f107 0308 	add.w	r3, r7, #8
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
 8000602:	609a      	str	r2, [r3, #8]
 8000604:	60da      	str	r2, [r3, #12]
	{ .Mode = GPIO_MODE_OUTPUT_PP, .Pin = lcd->RS_GPIO_Pin, .Speed = GPIO_SPEED_FREQ_LOW };
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	8b1b      	ldrh	r3, [r3, #24]
	GPIO_InitTypeDef G =
 800060a:	60bb      	str	r3, [r7, #8]
 800060c:	2301      	movs	r3, #1
 800060e:	60fb      	str	r3, [r7, #12]
 8000610:	2302      	movs	r3, #2
 8000612:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(lcd->RS_GPIO, &G);
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	695b      	ldr	r3, [r3, #20]
 8000618:	f107 0208 	add.w	r2, r7, #8
 800061c:	4611      	mov	r1, r2
 800061e:	4618      	mov	r0, r3
 8000620:	f000 fafe 	bl	8000c20 <HAL_GPIO_Init>
	G.Pin = lcd->EN_GPIO_Pin;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	8a1b      	ldrh	r3, [r3, #16]
 8000628:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(lcd->EN_GPIO, &G);
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	68db      	ldr	r3, [r3, #12]
 800062e:	f107 0208 	add.w	r2, r7, #8
 8000632:	4611      	mov	r1, r2
 8000634:	4618      	mov	r0, r3
 8000636:	f000 faf3 	bl	8000c20 <HAL_GPIO_Init>

	G.Pin = 0xf << lcd->Data_GPIO_Start_Pin;
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	7a1b      	ldrb	r3, [r3, #8]
 800063e:	461a      	mov	r2, r3
 8000640:	230f      	movs	r3, #15
 8000642:	4093      	lsls	r3, r2
 8000644:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(lcd->Data_GPIO, &G);
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	685b      	ldr	r3, [r3, #4]
 800064a:	f107 0208 	add.w	r2, r7, #8
 800064e:	4611      	mov	r1, r2
 8000650:	4618      	mov	r0, r3
 8000652:	f000 fae5 	bl	8000c20 <HAL_GPIO_Init>
}
 8000656:	bf00      	nop
 8000658:	3718      	adds	r7, #24
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}

0800065e <Alcd_SendByte>:

/* User Functions  */
void Alcd_Display(Alcd_t *lcd, uint8_t ON_OFF);

static inline void Alcd_SendByte(Alcd_t *lcd, uint8_t CMD_Data, uint8_t value)
{
 800065e:	b580      	push	{r7, lr}
 8000660:	b082      	sub	sp, #8
 8000662:	af00      	add	r7, sp, #0
 8000664:	6078      	str	r0, [r7, #4]
 8000666:	460b      	mov	r3, r1
 8000668:	70fb      	strb	r3, [r7, #3]
 800066a:	4613      	mov	r3, r2
 800066c:	70bb      	strb	r3, [r7, #2]
	RS_SET(lcd, CMD_Data);
 800066e:	78fb      	ldrb	r3, [r7, #3]
 8000670:	4619      	mov	r1, r3
 8000672:	6878      	ldr	r0, [r7, #4]
 8000674:	f7ff ff98 	bl	80005a8 <RS_SET>
	// send the higher 4 bits
	Write_HalfByte(lcd, value >> 4);
 8000678:	78bb      	ldrb	r3, [r7, #2]
 800067a:	091b      	lsrs	r3, r3, #4
 800067c:	b2db      	uxtb	r3, r3
 800067e:	4619      	mov	r1, r3
 8000680:	6878      	ldr	r0, [r7, #4]
 8000682:	f7ff ff6c 	bl	800055e <Write_HalfByte>
	// pulse the enable pin
	PulseEn
 8000686:	2101      	movs	r1, #1
 8000688:	6878      	ldr	r0, [r7, #4]
 800068a:	f7ff ff9f 	bl	80005cc <EN_SET>
 800068e:	200a      	movs	r0, #10
 8000690:	f7ff ff58 	bl	8000544 <usDelay>
 8000694:	2100      	movs	r1, #0
 8000696:	6878      	ldr	r0, [r7, #4]
 8000698:	f7ff ff98 	bl	80005cc <EN_SET>
 800069c:	2064      	movs	r0, #100	; 0x64
 800069e:	f7ff ff51 	bl	8000544 <usDelay>
	;
	Write_HalfByte(lcd, value);
 80006a2:	78bb      	ldrb	r3, [r7, #2]
 80006a4:	4619      	mov	r1, r3
 80006a6:	6878      	ldr	r0, [r7, #4]
 80006a8:	f7ff ff59 	bl	800055e <Write_HalfByte>
	PulseEn
 80006ac:	2101      	movs	r1, #1
 80006ae:	6878      	ldr	r0, [r7, #4]
 80006b0:	f7ff ff8c 	bl	80005cc <EN_SET>
 80006b4:	200a      	movs	r0, #10
 80006b6:	f7ff ff45 	bl	8000544 <usDelay>
 80006ba:	2100      	movs	r1, #0
 80006bc:	6878      	ldr	r0, [r7, #4]
 80006be:	f7ff ff85 	bl	80005cc <EN_SET>
 80006c2:	2064      	movs	r0, #100	; 0x64
 80006c4:	f7ff ff3e 	bl	8000544 <usDelay>
	;
}
 80006c8:	bf00      	nop
 80006ca:	3708      	adds	r7, #8
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}

080006d0 <Alcd_Init>:

void Alcd_Init(Alcd_t *lcd, uint8_t Lines, uint8_t Chars)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
 80006d8:	460b      	mov	r3, r1
 80006da:	70fb      	strb	r3, [r7, #3]
 80006dc:	4613      	mov	r3, r2
 80006de:	70bb      	strb	r3, [r7, #2]
	//INitialize the delay function using the ARM core cycle counter
	DWT_Delay_Init();
 80006e0:	f7ff fedc 	bl	800049c <DWT_Delay_Init>
	Alcd_Init_GPIO(lcd);
 80006e4:	6878      	ldr	r0, [r7, #4]
 80006e6:	f7ff ff83 	bl	80005f0 <Alcd_Init_GPIO>
	uint8_t x;

	lcd->RowOffsets[0] = 0;
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	2200      	movs	r2, #0
 80006ee:	769a      	strb	r2, [r3, #26]
	lcd->RowOffsets[1] = 0x40;
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	2240      	movs	r2, #64	; 0x40
 80006f4:	76da      	strb	r2, [r3, #27]
	lcd->RowOffsets[2] = 0 + Chars;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	78ba      	ldrb	r2, [r7, #2]
 80006fa:	771a      	strb	r2, [r3, #28]
	lcd->RowOffsets[3] = 0x40 + Chars;
 80006fc:	78bb      	ldrb	r3, [r7, #2]
 80006fe:	3340      	adds	r3, #64	; 0x40
 8000700:	b2da      	uxtb	r2, r3
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	775a      	strb	r2, [r3, #29]

	RS_SET(lcd, 0);
 8000706:	2100      	movs	r1, #0
 8000708:	6878      	ldr	r0, [r7, #4]
 800070a:	f7ff ff4d 	bl	80005a8 <RS_SET>
	EN_SET(lcd, 0);
 800070e:	2100      	movs	r1, #0
 8000710:	6878      	ldr	r0, [r7, #4]
 8000712:	f7ff ff5b 	bl	80005cc <EN_SET>
	usDelay(50000);
 8000716:	f24c 3050 	movw	r0, #50000	; 0xc350
 800071a:	f7ff ff13 	bl	8000544 <usDelay>

	// init display in 4-bit mode
	for (x = 0; x < 2; x++)
 800071e:	2300      	movs	r3, #0
 8000720:	73fb      	strb	r3, [r7, #15]
 8000722:	e018      	b.n	8000756 <Alcd_Init+0x86>
	{
		Write_HalfByte(lcd, 0x03);
 8000724:	2103      	movs	r1, #3
 8000726:	6878      	ldr	r0, [r7, #4]
 8000728:	f7ff ff19 	bl	800055e <Write_HalfByte>
		PulseEn
 800072c:	2101      	movs	r1, #1
 800072e:	6878      	ldr	r0, [r7, #4]
 8000730:	f7ff ff4c 	bl	80005cc <EN_SET>
 8000734:	200a      	movs	r0, #10
 8000736:	f7ff ff05 	bl	8000544 <usDelay>
 800073a:	2100      	movs	r1, #0
 800073c:	6878      	ldr	r0, [r7, #4]
 800073e:	f7ff ff45 	bl	80005cc <EN_SET>
 8000742:	2064      	movs	r0, #100	; 0x64
 8000744:	f7ff fefe 	bl	8000544 <usDelay>
		;
		usDelay(4500);
 8000748:	f241 1094 	movw	r0, #4500	; 0x1194
 800074c:	f7ff fefa 	bl	8000544 <usDelay>
	for (x = 0; x < 2; x++)
 8000750:	7bfb      	ldrb	r3, [r7, #15]
 8000752:	3301      	adds	r3, #1
 8000754:	73fb      	strb	r3, [r7, #15]
 8000756:	7bfb      	ldrb	r3, [r7, #15]
 8000758:	2b01      	cmp	r3, #1
 800075a:	d9e3      	bls.n	8000724 <Alcd_Init+0x54>
	}
	Write_HalfByte(lcd, 0x03);
 800075c:	2103      	movs	r1, #3
 800075e:	6878      	ldr	r0, [r7, #4]
 8000760:	f7ff fefd 	bl	800055e <Write_HalfByte>
	PulseEn
 8000764:	2101      	movs	r1, #1
 8000766:	6878      	ldr	r0, [r7, #4]
 8000768:	f7ff ff30 	bl	80005cc <EN_SET>
 800076c:	200a      	movs	r0, #10
 800076e:	f7ff fee9 	bl	8000544 <usDelay>
 8000772:	2100      	movs	r1, #0
 8000774:	6878      	ldr	r0, [r7, #4]
 8000776:	f7ff ff29 	bl	80005cc <EN_SET>
 800077a:	2064      	movs	r0, #100	; 0x64
 800077c:	f7ff fee2 	bl	8000544 <usDelay>
	;
	usDelay(150);
 8000780:	2096      	movs	r0, #150	; 0x96
 8000782:	f7ff fedf 	bl	8000544 <usDelay>
	Write_HalfByte(lcd, 0x02);
 8000786:	2102      	movs	r1, #2
 8000788:	6878      	ldr	r0, [r7, #4]
 800078a:	f7ff fee8 	bl	800055e <Write_HalfByte>
	PulseEn
 800078e:	2101      	movs	r1, #1
 8000790:	6878      	ldr	r0, [r7, #4]
 8000792:	f7ff ff1b 	bl	80005cc <EN_SET>
 8000796:	200a      	movs	r0, #10
 8000798:	f7ff fed4 	bl	8000544 <usDelay>
 800079c:	2100      	movs	r1, #0
 800079e:	6878      	ldr	r0, [r7, #4]
 80007a0:	f7ff ff14 	bl	80005cc <EN_SET>
 80007a4:	2064      	movs	r0, #100	; 0x64
 80007a6:	f7ff fecd 	bl	8000544 <usDelay>
	;

	// finally, set # lines, font size, etc.
	SendByte(0, LCD_FUNCTIONSET | LCD_2LINE | LCD_5x8DOTS);
 80007aa:	2228      	movs	r2, #40	; 0x28
 80007ac:	2100      	movs	r1, #0
 80007ae:	6878      	ldr	r0, [r7, #4]
 80007b0:	f7ff ff55 	bl	800065e <Alcd_SendByte>

	// turn the display on with no cursor or blinking default
	// lcd->_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;

	// turn on the display
	Alcd_Display_Control(lcd, 1, 0, 0);
 80007b4:	2300      	movs	r3, #0
 80007b6:	2200      	movs	r2, #0
 80007b8:	2101      	movs	r1, #1
 80007ba:	6878      	ldr	r0, [r7, #4]
 80007bc:	f000 f86d 	bl	800089a <Alcd_Display_Control>
	Alcd_Clear(lcd);
 80007c0:	6878      	ldr	r0, [r7, #4]
 80007c2:	f000 f859 	bl	8000878 <Alcd_Clear>
}
 80007c6:	bf00      	nop
 80007c8:	3710      	adds	r7, #16
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}

080007ce <Alcd_CursorAt>:

void Alcd_CursorAt(Alcd_t *lcd, uint8_t Row, uint8_t Col)
{
 80007ce:	b580      	push	{r7, lr}
 80007d0:	b082      	sub	sp, #8
 80007d2:	af00      	add	r7, sp, #0
 80007d4:	6078      	str	r0, [r7, #4]
 80007d6:	460b      	mov	r3, r1
 80007d8:	70fb      	strb	r3, [r7, #3]
 80007da:	4613      	mov	r3, r2
 80007dc:	70bb      	strb	r3, [r7, #2]
	SendByte(0, LCD_SETDDRAMADDR | (Col + lcd->RowOffsets[Row]));
 80007de:	78fb      	ldrb	r3, [r7, #3]
 80007e0:	687a      	ldr	r2, [r7, #4]
 80007e2:	4413      	add	r3, r2
 80007e4:	7e9a      	ldrb	r2, [r3, #26]
 80007e6:	78bb      	ldrb	r3, [r7, #2]
 80007e8:	4413      	add	r3, r2
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	b25b      	sxtb	r3, r3
 80007ee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80007f2:	b25b      	sxtb	r3, r3
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	461a      	mov	r2, r3
 80007f8:	2100      	movs	r1, #0
 80007fa:	6878      	ldr	r0, [r7, #4]
 80007fc:	f7ff ff2f 	bl	800065e <Alcd_SendByte>
}
 8000800:	bf00      	nop
 8000802:	3708      	adds	r7, #8
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}

08000808 <Alcd_Put_n>:

void Alcd_Put_n(Alcd_t *lcd, char *text, uint8_t len)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b086      	sub	sp, #24
 800080c:	af00      	add	r7, sp, #0
 800080e:	60f8      	str	r0, [r7, #12]
 8000810:	60b9      	str	r1, [r7, #8]
 8000812:	4613      	mov	r3, r2
 8000814:	71fb      	strb	r3, [r7, #7]
	for (uint8_t x = 0; x < len; x++)
 8000816:	2300      	movs	r3, #0
 8000818:	75fb      	strb	r3, [r7, #23]
 800081a:	e00b      	b.n	8000834 <Alcd_Put_n+0x2c>
	{
		SendByte(1, *(text++));
 800081c:	68bb      	ldr	r3, [r7, #8]
 800081e:	1c5a      	adds	r2, r3, #1
 8000820:	60ba      	str	r2, [r7, #8]
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	461a      	mov	r2, r3
 8000826:	2101      	movs	r1, #1
 8000828:	68f8      	ldr	r0, [r7, #12]
 800082a:	f7ff ff18 	bl	800065e <Alcd_SendByte>
	for (uint8_t x = 0; x < len; x++)
 800082e:	7dfb      	ldrb	r3, [r7, #23]
 8000830:	3301      	adds	r3, #1
 8000832:	75fb      	strb	r3, [r7, #23]
 8000834:	7dfa      	ldrb	r2, [r7, #23]
 8000836:	79fb      	ldrb	r3, [r7, #7]
 8000838:	429a      	cmp	r2, r3
 800083a:	d3ef      	bcc.n	800081c <Alcd_Put_n+0x14>
	}
}
 800083c:	bf00      	nop
 800083e:	bf00      	nop
 8000840:	3718      	adds	r7, #24
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}

08000846 <Alcd_PutAt_n>:

void Alcd_PutAt_n(Alcd_t *lcd, uint8_t Row, uint8_t Col, char *text, uint8_t len)
{
 8000846:	b580      	push	{r7, lr}
 8000848:	b084      	sub	sp, #16
 800084a:	af00      	add	r7, sp, #0
 800084c:	60f8      	str	r0, [r7, #12]
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	460b      	mov	r3, r1
 8000852:	72fb      	strb	r3, [r7, #11]
 8000854:	4613      	mov	r3, r2
 8000856:	72bb      	strb	r3, [r7, #10]
	Alcd_CursorAt(lcd, Row, Col);
 8000858:	7aba      	ldrb	r2, [r7, #10]
 800085a:	7afb      	ldrb	r3, [r7, #11]
 800085c:	4619      	mov	r1, r3
 800085e:	68f8      	ldr	r0, [r7, #12]
 8000860:	f7ff ffb5 	bl	80007ce <Alcd_CursorAt>
	Alcd_Put_n(lcd, text, len);
 8000864:	7e3b      	ldrb	r3, [r7, #24]
 8000866:	461a      	mov	r2, r3
 8000868:	6879      	ldr	r1, [r7, #4]
 800086a:	68f8      	ldr	r0, [r7, #12]
 800086c:	f7ff ffcc 	bl	8000808 <Alcd_Put_n>
}
 8000870:	bf00      	nop
 8000872:	3710      	adds	r7, #16
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}

08000878 <Alcd_Clear>:
	SendByte(0, LCD_RETURNHOME);
	usDelay(2000);
}

void Alcd_Clear(Alcd_t *lcd)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
	SendByte(0, LCD_CLEARDISPLAY);
 8000880:	2201      	movs	r2, #1
 8000882:	2100      	movs	r1, #0
 8000884:	6878      	ldr	r0, [r7, #4]
 8000886:	f7ff feea 	bl	800065e <Alcd_SendByte>
	usDelay(2000);
 800088a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800088e:	f7ff fe59 	bl	8000544 <usDelay>
}
 8000892:	bf00      	nop
 8000894:	3708      	adds	r7, #8
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}

0800089a <Alcd_Display_Control>:

void Alcd_Display_Control(Alcd_t *lcd, uint8_t ON_OFF, uint8_t CUR_ON_OFF, uint8_t BLINK_ON_OFF)
{
 800089a:	b580      	push	{r7, lr}
 800089c:	b082      	sub	sp, #8
 800089e:	af00      	add	r7, sp, #0
 80008a0:	6078      	str	r0, [r7, #4]
 80008a2:	4608      	mov	r0, r1
 80008a4:	4611      	mov	r1, r2
 80008a6:	461a      	mov	r2, r3
 80008a8:	4603      	mov	r3, r0
 80008aa:	70fb      	strb	r3, [r7, #3]
 80008ac:	460b      	mov	r3, r1
 80008ae:	70bb      	strb	r3, [r7, #2]
 80008b0:	4613      	mov	r3, r2
 80008b2:	707b      	strb	r3, [r7, #1]
	lcd->_displaycontrol = 0;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	2200      	movs	r2, #0
 80008b8:	779a      	strb	r2, [r3, #30]
	if (ON_OFF)
 80008ba:	78fb      	ldrb	r3, [r7, #3]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d006      	beq.n	80008ce <Alcd_Display_Control+0x34>
	{
		lcd->_displaycontrol |= LCD_DISPLAYON;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	7f9b      	ldrb	r3, [r3, #30]
 80008c4:	f043 0304 	orr.w	r3, r3, #4
 80008c8:	b2da      	uxtb	r2, r3
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	779a      	strb	r2, [r3, #30]
	}
	if (CUR_ON_OFF)
 80008ce:	78bb      	ldrb	r3, [r7, #2]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d006      	beq.n	80008e2 <Alcd_Display_Control+0x48>
	{
		lcd->_displaycontrol |= LCD_CURSORON;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	7f9b      	ldrb	r3, [r3, #30]
 80008d8:	f043 0302 	orr.w	r3, r3, #2
 80008dc:	b2da      	uxtb	r2, r3
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	779a      	strb	r2, [r3, #30]
	}
	if (BLINK_ON_OFF)
 80008e2:	787b      	ldrb	r3, [r7, #1]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d006      	beq.n	80008f6 <Alcd_Display_Control+0x5c>
	{
		lcd->_displaycontrol |= LCD_BLINKON;
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	7f9b      	ldrb	r3, [r3, #30]
 80008ec:	f043 0301 	orr.w	r3, r3, #1
 80008f0:	b2da      	uxtb	r2, r3
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	779a      	strb	r2, [r3, #30]
	}
	lcd->_displaycontrol |= LCD_DISPLAYON;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	7f9b      	ldrb	r3, [r3, #30]
 80008fa:	f043 0304 	orr.w	r3, r3, #4
 80008fe:	b2da      	uxtb	r2, r3
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	779a      	strb	r2, [r3, #30]
	SendByte(0, LCD_DISPLAYCONTROL | lcd->_displaycontrol);
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	7f9b      	ldrb	r3, [r3, #30]
 8000908:	f043 0308 	orr.w	r3, r3, #8
 800090c:	b2db      	uxtb	r3, r3
 800090e:	461a      	mov	r2, r3
 8000910:	2100      	movs	r1, #0
 8000912:	6878      	ldr	r0, [r7, #4]
 8000914:	f7ff fea3 	bl	800065e <Alcd_SendByte>
}
 8000918:	bf00      	nop
 800091a:	3708      	adds	r7, #8
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}

08000920 <Str_Len>:
{
	SendByte(1, chr);
}

int Str_Len(char *string)
{
 8000920:	b480      	push	{r7}
 8000922:	b085      	sub	sp, #20
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
	int len = 0;
 8000928:	2300      	movs	r3, #0
 800092a:	60fb      	str	r3, [r7, #12]
	while (*(string++))
 800092c:	e002      	b.n	8000934 <Str_Len+0x14>
	{
		len++;
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	3301      	adds	r3, #1
 8000932:	60fb      	str	r3, [r7, #12]
	while (*(string++))
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	1c5a      	adds	r2, r3, #1
 8000938:	607a      	str	r2, [r7, #4]
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d1f6      	bne.n	800092e <Str_Len+0xe>
	}
	return len;
 8000940:	68fb      	ldr	r3, [r7, #12]
}
 8000942:	4618      	mov	r0, r3
 8000944:	3714      	adds	r7, #20
 8000946:	46bd      	mov	sp, r7
 8000948:	bc80      	pop	{r7}
 800094a:	4770      	bx	lr

0800094c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000950:	4b08      	ldr	r3, [pc, #32]	; (8000974 <HAL_Init+0x28>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a07      	ldr	r2, [pc, #28]	; (8000974 <HAL_Init+0x28>)
 8000956:	f043 0310 	orr.w	r3, r3, #16
 800095a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800095c:	2003      	movs	r0, #3
 800095e:	f000 f92b 	bl	8000bb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000962:	200f      	movs	r0, #15
 8000964:	f000 f808 	bl	8000978 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000968:	f7ff fcdc 	bl	8000324 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800096c:	2300      	movs	r3, #0
}
 800096e:	4618      	mov	r0, r3
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40022000 	.word	0x40022000

08000978 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000980:	4b12      	ldr	r3, [pc, #72]	; (80009cc <HAL_InitTick+0x54>)
 8000982:	681a      	ldr	r2, [r3, #0]
 8000984:	4b12      	ldr	r3, [pc, #72]	; (80009d0 <HAL_InitTick+0x58>)
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	4619      	mov	r1, r3
 800098a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800098e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000992:	fbb2 f3f3 	udiv	r3, r2, r3
 8000996:	4618      	mov	r0, r3
 8000998:	f000 f935 	bl	8000c06 <HAL_SYSTICK_Config>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009a2:	2301      	movs	r3, #1
 80009a4:	e00e      	b.n	80009c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	2b0f      	cmp	r3, #15
 80009aa:	d80a      	bhi.n	80009c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009ac:	2200      	movs	r2, #0
 80009ae:	6879      	ldr	r1, [r7, #4]
 80009b0:	f04f 30ff 	mov.w	r0, #4294967295
 80009b4:	f000 f90b 	bl	8000bce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009b8:	4a06      	ldr	r2, [pc, #24]	; (80009d4 <HAL_InitTick+0x5c>)
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009be:	2300      	movs	r3, #0
 80009c0:	e000      	b.n	80009c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009c2:	2301      	movs	r3, #1
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	3708      	adds	r7, #8
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	20000020 	.word	0x20000020
 80009d0:	20000028 	.word	0x20000028
 80009d4:	20000024 	.word	0x20000024

080009d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009dc:	4b05      	ldr	r3, [pc, #20]	; (80009f4 <HAL_IncTick+0x1c>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	461a      	mov	r2, r3
 80009e2:	4b05      	ldr	r3, [pc, #20]	; (80009f8 <HAL_IncTick+0x20>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	4413      	add	r3, r2
 80009e8:	4a03      	ldr	r2, [pc, #12]	; (80009f8 <HAL_IncTick+0x20>)
 80009ea:	6013      	str	r3, [r2, #0]
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bc80      	pop	{r7}
 80009f2:	4770      	bx	lr
 80009f4:	20000028 	.word	0x20000028
 80009f8:	200000c4 	.word	0x200000c4

080009fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000a00:	4b02      	ldr	r3, [pc, #8]	; (8000a0c <HAL_GetTick+0x10>)
 8000a02:	681b      	ldr	r3, [r3, #0]
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bc80      	pop	{r7}
 8000a0a:	4770      	bx	lr
 8000a0c:	200000c4 	.word	0x200000c4

08000a10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b084      	sub	sp, #16
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a18:	f7ff fff0 	bl	80009fc <HAL_GetTick>
 8000a1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a28:	d005      	beq.n	8000a36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a2a:	4b0a      	ldr	r3, [pc, #40]	; (8000a54 <HAL_Delay+0x44>)
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	461a      	mov	r2, r3
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	4413      	add	r3, r2
 8000a34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a36:	bf00      	nop
 8000a38:	f7ff ffe0 	bl	80009fc <HAL_GetTick>
 8000a3c:	4602      	mov	r2, r0
 8000a3e:	68bb      	ldr	r3, [r7, #8]
 8000a40:	1ad3      	subs	r3, r2, r3
 8000a42:	68fa      	ldr	r2, [r7, #12]
 8000a44:	429a      	cmp	r2, r3
 8000a46:	d8f7      	bhi.n	8000a38 <HAL_Delay+0x28>
  {
  }
}
 8000a48:	bf00      	nop
 8000a4a:	bf00      	nop
 8000a4c:	3710      	adds	r7, #16
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	20000028 	.word	0x20000028

08000a58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b085      	sub	sp, #20
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	f003 0307 	and.w	r3, r3, #7
 8000a66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a68:	4b0c      	ldr	r3, [pc, #48]	; (8000a9c <__NVIC_SetPriorityGrouping+0x44>)
 8000a6a:	68db      	ldr	r3, [r3, #12]
 8000a6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a6e:	68ba      	ldr	r2, [r7, #8]
 8000a70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a74:	4013      	ands	r3, r2
 8000a76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a8a:	4a04      	ldr	r2, [pc, #16]	; (8000a9c <__NVIC_SetPriorityGrouping+0x44>)
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	60d3      	str	r3, [r2, #12]
}
 8000a90:	bf00      	nop
 8000a92:	3714      	adds	r7, #20
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bc80      	pop	{r7}
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	e000ed00 	.word	0xe000ed00

08000aa0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000aa4:	4b04      	ldr	r3, [pc, #16]	; (8000ab8 <__NVIC_GetPriorityGrouping+0x18>)
 8000aa6:	68db      	ldr	r3, [r3, #12]
 8000aa8:	0a1b      	lsrs	r3, r3, #8
 8000aaa:	f003 0307 	and.w	r3, r3, #7
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bc80      	pop	{r7}
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	e000ed00 	.word	0xe000ed00

08000abc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	6039      	str	r1, [r7, #0]
 8000ac6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ac8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	db0a      	blt.n	8000ae6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	b2da      	uxtb	r2, r3
 8000ad4:	490c      	ldr	r1, [pc, #48]	; (8000b08 <__NVIC_SetPriority+0x4c>)
 8000ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ada:	0112      	lsls	r2, r2, #4
 8000adc:	b2d2      	uxtb	r2, r2
 8000ade:	440b      	add	r3, r1
 8000ae0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ae4:	e00a      	b.n	8000afc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	b2da      	uxtb	r2, r3
 8000aea:	4908      	ldr	r1, [pc, #32]	; (8000b0c <__NVIC_SetPriority+0x50>)
 8000aec:	79fb      	ldrb	r3, [r7, #7]
 8000aee:	f003 030f 	and.w	r3, r3, #15
 8000af2:	3b04      	subs	r3, #4
 8000af4:	0112      	lsls	r2, r2, #4
 8000af6:	b2d2      	uxtb	r2, r2
 8000af8:	440b      	add	r3, r1
 8000afa:	761a      	strb	r2, [r3, #24]
}
 8000afc:	bf00      	nop
 8000afe:	370c      	adds	r7, #12
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bc80      	pop	{r7}
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	e000e100 	.word	0xe000e100
 8000b0c:	e000ed00 	.word	0xe000ed00

08000b10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b089      	sub	sp, #36	; 0x24
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	60f8      	str	r0, [r7, #12]
 8000b18:	60b9      	str	r1, [r7, #8]
 8000b1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	f003 0307 	and.w	r3, r3, #7
 8000b22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b24:	69fb      	ldr	r3, [r7, #28]
 8000b26:	f1c3 0307 	rsb	r3, r3, #7
 8000b2a:	2b04      	cmp	r3, #4
 8000b2c:	bf28      	it	cs
 8000b2e:	2304      	movcs	r3, #4
 8000b30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b32:	69fb      	ldr	r3, [r7, #28]
 8000b34:	3304      	adds	r3, #4
 8000b36:	2b06      	cmp	r3, #6
 8000b38:	d902      	bls.n	8000b40 <NVIC_EncodePriority+0x30>
 8000b3a:	69fb      	ldr	r3, [r7, #28]
 8000b3c:	3b03      	subs	r3, #3
 8000b3e:	e000      	b.n	8000b42 <NVIC_EncodePriority+0x32>
 8000b40:	2300      	movs	r3, #0
 8000b42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b44:	f04f 32ff 	mov.w	r2, #4294967295
 8000b48:	69bb      	ldr	r3, [r7, #24]
 8000b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4e:	43da      	mvns	r2, r3
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	401a      	ands	r2, r3
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b58:	f04f 31ff 	mov.w	r1, #4294967295
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b62:	43d9      	mvns	r1, r3
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b68:	4313      	orrs	r3, r2
         );
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3724      	adds	r7, #36	; 0x24
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bc80      	pop	{r7}
 8000b72:	4770      	bx	lr

08000b74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	3b01      	subs	r3, #1
 8000b80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b84:	d301      	bcc.n	8000b8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b86:	2301      	movs	r3, #1
 8000b88:	e00f      	b.n	8000baa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b8a:	4a0a      	ldr	r2, [pc, #40]	; (8000bb4 <SysTick_Config+0x40>)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	3b01      	subs	r3, #1
 8000b90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b92:	210f      	movs	r1, #15
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	f7ff ff90 	bl	8000abc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b9c:	4b05      	ldr	r3, [pc, #20]	; (8000bb4 <SysTick_Config+0x40>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ba2:	4b04      	ldr	r3, [pc, #16]	; (8000bb4 <SysTick_Config+0x40>)
 8000ba4:	2207      	movs	r2, #7
 8000ba6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ba8:	2300      	movs	r3, #0
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	e000e010 	.word	0xe000e010

08000bb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bc0:	6878      	ldr	r0, [r7, #4]
 8000bc2:	f7ff ff49 	bl	8000a58 <__NVIC_SetPriorityGrouping>
}
 8000bc6:	bf00      	nop
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}

08000bce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bce:	b580      	push	{r7, lr}
 8000bd0:	b086      	sub	sp, #24
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	60b9      	str	r1, [r7, #8]
 8000bd8:	607a      	str	r2, [r7, #4]
 8000bda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000be0:	f7ff ff5e 	bl	8000aa0 <__NVIC_GetPriorityGrouping>
 8000be4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000be6:	687a      	ldr	r2, [r7, #4]
 8000be8:	68b9      	ldr	r1, [r7, #8]
 8000bea:	6978      	ldr	r0, [r7, #20]
 8000bec:	f7ff ff90 	bl	8000b10 <NVIC_EncodePriority>
 8000bf0:	4602      	mov	r2, r0
 8000bf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bf6:	4611      	mov	r1, r2
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f7ff ff5f 	bl	8000abc <__NVIC_SetPriority>
}
 8000bfe:	bf00      	nop
 8000c00:	3718      	adds	r7, #24
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}

08000c06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c06:	b580      	push	{r7, lr}
 8000c08:	b082      	sub	sp, #8
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c0e:	6878      	ldr	r0, [r7, #4]
 8000c10:	f7ff ffb0 	bl	8000b74 <SysTick_Config>
 8000c14:	4603      	mov	r3, r0
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
	...

08000c20 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b08b      	sub	sp, #44	; 0x2c
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c32:	e169      	b.n	8000f08 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c34:	2201      	movs	r2, #1
 8000c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c38:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	69fa      	ldr	r2, [r7, #28]
 8000c44:	4013      	ands	r3, r2
 8000c46:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c48:	69ba      	ldr	r2, [r7, #24]
 8000c4a:	69fb      	ldr	r3, [r7, #28]
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	f040 8158 	bne.w	8000f02 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	4a9a      	ldr	r2, [pc, #616]	; (8000ec0 <HAL_GPIO_Init+0x2a0>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d05e      	beq.n	8000d1a <HAL_GPIO_Init+0xfa>
 8000c5c:	4a98      	ldr	r2, [pc, #608]	; (8000ec0 <HAL_GPIO_Init+0x2a0>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d875      	bhi.n	8000d4e <HAL_GPIO_Init+0x12e>
 8000c62:	4a98      	ldr	r2, [pc, #608]	; (8000ec4 <HAL_GPIO_Init+0x2a4>)
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d058      	beq.n	8000d1a <HAL_GPIO_Init+0xfa>
 8000c68:	4a96      	ldr	r2, [pc, #600]	; (8000ec4 <HAL_GPIO_Init+0x2a4>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d86f      	bhi.n	8000d4e <HAL_GPIO_Init+0x12e>
 8000c6e:	4a96      	ldr	r2, [pc, #600]	; (8000ec8 <HAL_GPIO_Init+0x2a8>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d052      	beq.n	8000d1a <HAL_GPIO_Init+0xfa>
 8000c74:	4a94      	ldr	r2, [pc, #592]	; (8000ec8 <HAL_GPIO_Init+0x2a8>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d869      	bhi.n	8000d4e <HAL_GPIO_Init+0x12e>
 8000c7a:	4a94      	ldr	r2, [pc, #592]	; (8000ecc <HAL_GPIO_Init+0x2ac>)
 8000c7c:	4293      	cmp	r3, r2
 8000c7e:	d04c      	beq.n	8000d1a <HAL_GPIO_Init+0xfa>
 8000c80:	4a92      	ldr	r2, [pc, #584]	; (8000ecc <HAL_GPIO_Init+0x2ac>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d863      	bhi.n	8000d4e <HAL_GPIO_Init+0x12e>
 8000c86:	4a92      	ldr	r2, [pc, #584]	; (8000ed0 <HAL_GPIO_Init+0x2b0>)
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d046      	beq.n	8000d1a <HAL_GPIO_Init+0xfa>
 8000c8c:	4a90      	ldr	r2, [pc, #576]	; (8000ed0 <HAL_GPIO_Init+0x2b0>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d85d      	bhi.n	8000d4e <HAL_GPIO_Init+0x12e>
 8000c92:	2b12      	cmp	r3, #18
 8000c94:	d82a      	bhi.n	8000cec <HAL_GPIO_Init+0xcc>
 8000c96:	2b12      	cmp	r3, #18
 8000c98:	d859      	bhi.n	8000d4e <HAL_GPIO_Init+0x12e>
 8000c9a:	a201      	add	r2, pc, #4	; (adr r2, 8000ca0 <HAL_GPIO_Init+0x80>)
 8000c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ca0:	08000d1b 	.word	0x08000d1b
 8000ca4:	08000cf5 	.word	0x08000cf5
 8000ca8:	08000d07 	.word	0x08000d07
 8000cac:	08000d49 	.word	0x08000d49
 8000cb0:	08000d4f 	.word	0x08000d4f
 8000cb4:	08000d4f 	.word	0x08000d4f
 8000cb8:	08000d4f 	.word	0x08000d4f
 8000cbc:	08000d4f 	.word	0x08000d4f
 8000cc0:	08000d4f 	.word	0x08000d4f
 8000cc4:	08000d4f 	.word	0x08000d4f
 8000cc8:	08000d4f 	.word	0x08000d4f
 8000ccc:	08000d4f 	.word	0x08000d4f
 8000cd0:	08000d4f 	.word	0x08000d4f
 8000cd4:	08000d4f 	.word	0x08000d4f
 8000cd8:	08000d4f 	.word	0x08000d4f
 8000cdc:	08000d4f 	.word	0x08000d4f
 8000ce0:	08000d4f 	.word	0x08000d4f
 8000ce4:	08000cfd 	.word	0x08000cfd
 8000ce8:	08000d11 	.word	0x08000d11
 8000cec:	4a79      	ldr	r2, [pc, #484]	; (8000ed4 <HAL_GPIO_Init+0x2b4>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d013      	beq.n	8000d1a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000cf2:	e02c      	b.n	8000d4e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	68db      	ldr	r3, [r3, #12]
 8000cf8:	623b      	str	r3, [r7, #32]
          break;
 8000cfa:	e029      	b.n	8000d50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	68db      	ldr	r3, [r3, #12]
 8000d00:	3304      	adds	r3, #4
 8000d02:	623b      	str	r3, [r7, #32]
          break;
 8000d04:	e024      	b.n	8000d50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	68db      	ldr	r3, [r3, #12]
 8000d0a:	3308      	adds	r3, #8
 8000d0c:	623b      	str	r3, [r7, #32]
          break;
 8000d0e:	e01f      	b.n	8000d50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	68db      	ldr	r3, [r3, #12]
 8000d14:	330c      	adds	r3, #12
 8000d16:	623b      	str	r3, [r7, #32]
          break;
 8000d18:	e01a      	b.n	8000d50 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	689b      	ldr	r3, [r3, #8]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d102      	bne.n	8000d28 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d22:	2304      	movs	r3, #4
 8000d24:	623b      	str	r3, [r7, #32]
          break;
 8000d26:	e013      	b.n	8000d50 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	689b      	ldr	r3, [r3, #8]
 8000d2c:	2b01      	cmp	r3, #1
 8000d2e:	d105      	bne.n	8000d3c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d30:	2308      	movs	r3, #8
 8000d32:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	69fa      	ldr	r2, [r7, #28]
 8000d38:	611a      	str	r2, [r3, #16]
          break;
 8000d3a:	e009      	b.n	8000d50 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d3c:	2308      	movs	r3, #8
 8000d3e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	69fa      	ldr	r2, [r7, #28]
 8000d44:	615a      	str	r2, [r3, #20]
          break;
 8000d46:	e003      	b.n	8000d50 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	623b      	str	r3, [r7, #32]
          break;
 8000d4c:	e000      	b.n	8000d50 <HAL_GPIO_Init+0x130>
          break;
 8000d4e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d50:	69bb      	ldr	r3, [r7, #24]
 8000d52:	2bff      	cmp	r3, #255	; 0xff
 8000d54:	d801      	bhi.n	8000d5a <HAL_GPIO_Init+0x13a>
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	e001      	b.n	8000d5e <HAL_GPIO_Init+0x13e>
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	3304      	adds	r3, #4
 8000d5e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d60:	69bb      	ldr	r3, [r7, #24]
 8000d62:	2bff      	cmp	r3, #255	; 0xff
 8000d64:	d802      	bhi.n	8000d6c <HAL_GPIO_Init+0x14c>
 8000d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d68:	009b      	lsls	r3, r3, #2
 8000d6a:	e002      	b.n	8000d72 <HAL_GPIO_Init+0x152>
 8000d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d6e:	3b08      	subs	r3, #8
 8000d70:	009b      	lsls	r3, r3, #2
 8000d72:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	210f      	movs	r1, #15
 8000d7a:	693b      	ldr	r3, [r7, #16]
 8000d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d80:	43db      	mvns	r3, r3
 8000d82:	401a      	ands	r2, r3
 8000d84:	6a39      	ldr	r1, [r7, #32]
 8000d86:	693b      	ldr	r3, [r7, #16]
 8000d88:	fa01 f303 	lsl.w	r3, r1, r3
 8000d8c:	431a      	orrs	r2, r3
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	f000 80b1 	beq.w	8000f02 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000da0:	4b4d      	ldr	r3, [pc, #308]	; (8000ed8 <HAL_GPIO_Init+0x2b8>)
 8000da2:	699b      	ldr	r3, [r3, #24]
 8000da4:	4a4c      	ldr	r2, [pc, #304]	; (8000ed8 <HAL_GPIO_Init+0x2b8>)
 8000da6:	f043 0301 	orr.w	r3, r3, #1
 8000daa:	6193      	str	r3, [r2, #24]
 8000dac:	4b4a      	ldr	r3, [pc, #296]	; (8000ed8 <HAL_GPIO_Init+0x2b8>)
 8000dae:	699b      	ldr	r3, [r3, #24]
 8000db0:	f003 0301 	and.w	r3, r3, #1
 8000db4:	60bb      	str	r3, [r7, #8]
 8000db6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000db8:	4a48      	ldr	r2, [pc, #288]	; (8000edc <HAL_GPIO_Init+0x2bc>)
 8000dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dbc:	089b      	lsrs	r3, r3, #2
 8000dbe:	3302      	adds	r3, #2
 8000dc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dc4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dc8:	f003 0303 	and.w	r3, r3, #3
 8000dcc:	009b      	lsls	r3, r3, #2
 8000dce:	220f      	movs	r2, #15
 8000dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd4:	43db      	mvns	r3, r3
 8000dd6:	68fa      	ldr	r2, [r7, #12]
 8000dd8:	4013      	ands	r3, r2
 8000dda:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	4a40      	ldr	r2, [pc, #256]	; (8000ee0 <HAL_GPIO_Init+0x2c0>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d013      	beq.n	8000e0c <HAL_GPIO_Init+0x1ec>
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	4a3f      	ldr	r2, [pc, #252]	; (8000ee4 <HAL_GPIO_Init+0x2c4>)
 8000de8:	4293      	cmp	r3, r2
 8000dea:	d00d      	beq.n	8000e08 <HAL_GPIO_Init+0x1e8>
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	4a3e      	ldr	r2, [pc, #248]	; (8000ee8 <HAL_GPIO_Init+0x2c8>)
 8000df0:	4293      	cmp	r3, r2
 8000df2:	d007      	beq.n	8000e04 <HAL_GPIO_Init+0x1e4>
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	4a3d      	ldr	r2, [pc, #244]	; (8000eec <HAL_GPIO_Init+0x2cc>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d101      	bne.n	8000e00 <HAL_GPIO_Init+0x1e0>
 8000dfc:	2303      	movs	r3, #3
 8000dfe:	e006      	b.n	8000e0e <HAL_GPIO_Init+0x1ee>
 8000e00:	2304      	movs	r3, #4
 8000e02:	e004      	b.n	8000e0e <HAL_GPIO_Init+0x1ee>
 8000e04:	2302      	movs	r3, #2
 8000e06:	e002      	b.n	8000e0e <HAL_GPIO_Init+0x1ee>
 8000e08:	2301      	movs	r3, #1
 8000e0a:	e000      	b.n	8000e0e <HAL_GPIO_Init+0x1ee>
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e10:	f002 0203 	and.w	r2, r2, #3
 8000e14:	0092      	lsls	r2, r2, #2
 8000e16:	4093      	lsls	r3, r2
 8000e18:	68fa      	ldr	r2, [r7, #12]
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000e1e:	492f      	ldr	r1, [pc, #188]	; (8000edc <HAL_GPIO_Init+0x2bc>)
 8000e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e22:	089b      	lsrs	r3, r3, #2
 8000e24:	3302      	adds	r3, #2
 8000e26:	68fa      	ldr	r2, [r7, #12]
 8000e28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d006      	beq.n	8000e46 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e38:	4b2d      	ldr	r3, [pc, #180]	; (8000ef0 <HAL_GPIO_Init+0x2d0>)
 8000e3a:	689a      	ldr	r2, [r3, #8]
 8000e3c:	492c      	ldr	r1, [pc, #176]	; (8000ef0 <HAL_GPIO_Init+0x2d0>)
 8000e3e:	69bb      	ldr	r3, [r7, #24]
 8000e40:	4313      	orrs	r3, r2
 8000e42:	608b      	str	r3, [r1, #8]
 8000e44:	e006      	b.n	8000e54 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e46:	4b2a      	ldr	r3, [pc, #168]	; (8000ef0 <HAL_GPIO_Init+0x2d0>)
 8000e48:	689a      	ldr	r2, [r3, #8]
 8000e4a:	69bb      	ldr	r3, [r7, #24]
 8000e4c:	43db      	mvns	r3, r3
 8000e4e:	4928      	ldr	r1, [pc, #160]	; (8000ef0 <HAL_GPIO_Init+0x2d0>)
 8000e50:	4013      	ands	r3, r2
 8000e52:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d006      	beq.n	8000e6e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e60:	4b23      	ldr	r3, [pc, #140]	; (8000ef0 <HAL_GPIO_Init+0x2d0>)
 8000e62:	68da      	ldr	r2, [r3, #12]
 8000e64:	4922      	ldr	r1, [pc, #136]	; (8000ef0 <HAL_GPIO_Init+0x2d0>)
 8000e66:	69bb      	ldr	r3, [r7, #24]
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	60cb      	str	r3, [r1, #12]
 8000e6c:	e006      	b.n	8000e7c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e6e:	4b20      	ldr	r3, [pc, #128]	; (8000ef0 <HAL_GPIO_Init+0x2d0>)
 8000e70:	68da      	ldr	r2, [r3, #12]
 8000e72:	69bb      	ldr	r3, [r7, #24]
 8000e74:	43db      	mvns	r3, r3
 8000e76:	491e      	ldr	r1, [pc, #120]	; (8000ef0 <HAL_GPIO_Init+0x2d0>)
 8000e78:	4013      	ands	r3, r2
 8000e7a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d006      	beq.n	8000e96 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e88:	4b19      	ldr	r3, [pc, #100]	; (8000ef0 <HAL_GPIO_Init+0x2d0>)
 8000e8a:	685a      	ldr	r2, [r3, #4]
 8000e8c:	4918      	ldr	r1, [pc, #96]	; (8000ef0 <HAL_GPIO_Init+0x2d0>)
 8000e8e:	69bb      	ldr	r3, [r7, #24]
 8000e90:	4313      	orrs	r3, r2
 8000e92:	604b      	str	r3, [r1, #4]
 8000e94:	e006      	b.n	8000ea4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e96:	4b16      	ldr	r3, [pc, #88]	; (8000ef0 <HAL_GPIO_Init+0x2d0>)
 8000e98:	685a      	ldr	r2, [r3, #4]
 8000e9a:	69bb      	ldr	r3, [r7, #24]
 8000e9c:	43db      	mvns	r3, r3
 8000e9e:	4914      	ldr	r1, [pc, #80]	; (8000ef0 <HAL_GPIO_Init+0x2d0>)
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d021      	beq.n	8000ef4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000eb0:	4b0f      	ldr	r3, [pc, #60]	; (8000ef0 <HAL_GPIO_Init+0x2d0>)
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	490e      	ldr	r1, [pc, #56]	; (8000ef0 <HAL_GPIO_Init+0x2d0>)
 8000eb6:	69bb      	ldr	r3, [r7, #24]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	600b      	str	r3, [r1, #0]
 8000ebc:	e021      	b.n	8000f02 <HAL_GPIO_Init+0x2e2>
 8000ebe:	bf00      	nop
 8000ec0:	10320000 	.word	0x10320000
 8000ec4:	10310000 	.word	0x10310000
 8000ec8:	10220000 	.word	0x10220000
 8000ecc:	10210000 	.word	0x10210000
 8000ed0:	10120000 	.word	0x10120000
 8000ed4:	10110000 	.word	0x10110000
 8000ed8:	40021000 	.word	0x40021000
 8000edc:	40010000 	.word	0x40010000
 8000ee0:	40010800 	.word	0x40010800
 8000ee4:	40010c00 	.word	0x40010c00
 8000ee8:	40011000 	.word	0x40011000
 8000eec:	40011400 	.word	0x40011400
 8000ef0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ef4:	4b0b      	ldr	r3, [pc, #44]	; (8000f24 <HAL_GPIO_Init+0x304>)
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	69bb      	ldr	r3, [r7, #24]
 8000efa:	43db      	mvns	r3, r3
 8000efc:	4909      	ldr	r1, [pc, #36]	; (8000f24 <HAL_GPIO_Init+0x304>)
 8000efe:	4013      	ands	r3, r2
 8000f00:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f04:	3301      	adds	r3, #1
 8000f06:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f0e:	fa22 f303 	lsr.w	r3, r2, r3
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	f47f ae8e 	bne.w	8000c34 <HAL_GPIO_Init+0x14>
  }
}
 8000f18:	bf00      	nop
 8000f1a:	bf00      	nop
 8000f1c:	372c      	adds	r7, #44	; 0x2c
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bc80      	pop	{r7}
 8000f22:	4770      	bx	lr
 8000f24:	40010400 	.word	0x40010400

08000f28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	460b      	mov	r3, r1
 8000f32:	807b      	strh	r3, [r7, #2]
 8000f34:	4613      	mov	r3, r2
 8000f36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f38:	787b      	ldrb	r3, [r7, #1]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d003      	beq.n	8000f46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f3e:	887a      	ldrh	r2, [r7, #2]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000f44:	e003      	b.n	8000f4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f46:	887b      	ldrh	r3, [r7, #2]
 8000f48:	041a      	lsls	r2, r3, #16
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	611a      	str	r2, [r3, #16]
}
 8000f4e:	bf00      	nop
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bc80      	pop	{r7}
 8000f56:	4770      	bx	lr

08000f58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b086      	sub	sp, #24
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d101      	bne.n	8000f6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f66:	2301      	movs	r3, #1
 8000f68:	e272      	b.n	8001450 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f003 0301 	and.w	r3, r3, #1
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	f000 8087 	beq.w	8001086 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f78:	4b92      	ldr	r3, [pc, #584]	; (80011c4 <HAL_RCC_OscConfig+0x26c>)
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	f003 030c 	and.w	r3, r3, #12
 8000f80:	2b04      	cmp	r3, #4
 8000f82:	d00c      	beq.n	8000f9e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f84:	4b8f      	ldr	r3, [pc, #572]	; (80011c4 <HAL_RCC_OscConfig+0x26c>)
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f003 030c 	and.w	r3, r3, #12
 8000f8c:	2b08      	cmp	r3, #8
 8000f8e:	d112      	bne.n	8000fb6 <HAL_RCC_OscConfig+0x5e>
 8000f90:	4b8c      	ldr	r3, [pc, #560]	; (80011c4 <HAL_RCC_OscConfig+0x26c>)
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f9c:	d10b      	bne.n	8000fb6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f9e:	4b89      	ldr	r3, [pc, #548]	; (80011c4 <HAL_RCC_OscConfig+0x26c>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d06c      	beq.n	8001084 <HAL_RCC_OscConfig+0x12c>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d168      	bne.n	8001084 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e24c      	b.n	8001450 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fbe:	d106      	bne.n	8000fce <HAL_RCC_OscConfig+0x76>
 8000fc0:	4b80      	ldr	r3, [pc, #512]	; (80011c4 <HAL_RCC_OscConfig+0x26c>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a7f      	ldr	r2, [pc, #508]	; (80011c4 <HAL_RCC_OscConfig+0x26c>)
 8000fc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fca:	6013      	str	r3, [r2, #0]
 8000fcc:	e02e      	b.n	800102c <HAL_RCC_OscConfig+0xd4>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d10c      	bne.n	8000ff0 <HAL_RCC_OscConfig+0x98>
 8000fd6:	4b7b      	ldr	r3, [pc, #492]	; (80011c4 <HAL_RCC_OscConfig+0x26c>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a7a      	ldr	r2, [pc, #488]	; (80011c4 <HAL_RCC_OscConfig+0x26c>)
 8000fdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fe0:	6013      	str	r3, [r2, #0]
 8000fe2:	4b78      	ldr	r3, [pc, #480]	; (80011c4 <HAL_RCC_OscConfig+0x26c>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a77      	ldr	r2, [pc, #476]	; (80011c4 <HAL_RCC_OscConfig+0x26c>)
 8000fe8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fec:	6013      	str	r3, [r2, #0]
 8000fee:	e01d      	b.n	800102c <HAL_RCC_OscConfig+0xd4>
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ff8:	d10c      	bne.n	8001014 <HAL_RCC_OscConfig+0xbc>
 8000ffa:	4b72      	ldr	r3, [pc, #456]	; (80011c4 <HAL_RCC_OscConfig+0x26c>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a71      	ldr	r2, [pc, #452]	; (80011c4 <HAL_RCC_OscConfig+0x26c>)
 8001000:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001004:	6013      	str	r3, [r2, #0]
 8001006:	4b6f      	ldr	r3, [pc, #444]	; (80011c4 <HAL_RCC_OscConfig+0x26c>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a6e      	ldr	r2, [pc, #440]	; (80011c4 <HAL_RCC_OscConfig+0x26c>)
 800100c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001010:	6013      	str	r3, [r2, #0]
 8001012:	e00b      	b.n	800102c <HAL_RCC_OscConfig+0xd4>
 8001014:	4b6b      	ldr	r3, [pc, #428]	; (80011c4 <HAL_RCC_OscConfig+0x26c>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a6a      	ldr	r2, [pc, #424]	; (80011c4 <HAL_RCC_OscConfig+0x26c>)
 800101a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800101e:	6013      	str	r3, [r2, #0]
 8001020:	4b68      	ldr	r3, [pc, #416]	; (80011c4 <HAL_RCC_OscConfig+0x26c>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a67      	ldr	r2, [pc, #412]	; (80011c4 <HAL_RCC_OscConfig+0x26c>)
 8001026:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800102a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d013      	beq.n	800105c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001034:	f7ff fce2 	bl	80009fc <HAL_GetTick>
 8001038:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800103a:	e008      	b.n	800104e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800103c:	f7ff fcde 	bl	80009fc <HAL_GetTick>
 8001040:	4602      	mov	r2, r0
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	1ad3      	subs	r3, r2, r3
 8001046:	2b64      	cmp	r3, #100	; 0x64
 8001048:	d901      	bls.n	800104e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800104a:	2303      	movs	r3, #3
 800104c:	e200      	b.n	8001450 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800104e:	4b5d      	ldr	r3, [pc, #372]	; (80011c4 <HAL_RCC_OscConfig+0x26c>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001056:	2b00      	cmp	r3, #0
 8001058:	d0f0      	beq.n	800103c <HAL_RCC_OscConfig+0xe4>
 800105a:	e014      	b.n	8001086 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800105c:	f7ff fcce 	bl	80009fc <HAL_GetTick>
 8001060:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001062:	e008      	b.n	8001076 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001064:	f7ff fcca 	bl	80009fc <HAL_GetTick>
 8001068:	4602      	mov	r2, r0
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	2b64      	cmp	r3, #100	; 0x64
 8001070:	d901      	bls.n	8001076 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001072:	2303      	movs	r3, #3
 8001074:	e1ec      	b.n	8001450 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001076:	4b53      	ldr	r3, [pc, #332]	; (80011c4 <HAL_RCC_OscConfig+0x26c>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800107e:	2b00      	cmp	r3, #0
 8001080:	d1f0      	bne.n	8001064 <HAL_RCC_OscConfig+0x10c>
 8001082:	e000      	b.n	8001086 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001084:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f003 0302 	and.w	r3, r3, #2
 800108e:	2b00      	cmp	r3, #0
 8001090:	d063      	beq.n	800115a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001092:	4b4c      	ldr	r3, [pc, #304]	; (80011c4 <HAL_RCC_OscConfig+0x26c>)
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f003 030c 	and.w	r3, r3, #12
 800109a:	2b00      	cmp	r3, #0
 800109c:	d00b      	beq.n	80010b6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800109e:	4b49      	ldr	r3, [pc, #292]	; (80011c4 <HAL_RCC_OscConfig+0x26c>)
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f003 030c 	and.w	r3, r3, #12
 80010a6:	2b08      	cmp	r3, #8
 80010a8:	d11c      	bne.n	80010e4 <HAL_RCC_OscConfig+0x18c>
 80010aa:	4b46      	ldr	r3, [pc, #280]	; (80011c4 <HAL_RCC_OscConfig+0x26c>)
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d116      	bne.n	80010e4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010b6:	4b43      	ldr	r3, [pc, #268]	; (80011c4 <HAL_RCC_OscConfig+0x26c>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f003 0302 	and.w	r3, r3, #2
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d005      	beq.n	80010ce <HAL_RCC_OscConfig+0x176>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	691b      	ldr	r3, [r3, #16]
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d001      	beq.n	80010ce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
 80010cc:	e1c0      	b.n	8001450 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010ce:	4b3d      	ldr	r3, [pc, #244]	; (80011c4 <HAL_RCC_OscConfig+0x26c>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	695b      	ldr	r3, [r3, #20]
 80010da:	00db      	lsls	r3, r3, #3
 80010dc:	4939      	ldr	r1, [pc, #228]	; (80011c4 <HAL_RCC_OscConfig+0x26c>)
 80010de:	4313      	orrs	r3, r2
 80010e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010e2:	e03a      	b.n	800115a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	691b      	ldr	r3, [r3, #16]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d020      	beq.n	800112e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010ec:	4b36      	ldr	r3, [pc, #216]	; (80011c8 <HAL_RCC_OscConfig+0x270>)
 80010ee:	2201      	movs	r2, #1
 80010f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010f2:	f7ff fc83 	bl	80009fc <HAL_GetTick>
 80010f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010f8:	e008      	b.n	800110c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010fa:	f7ff fc7f 	bl	80009fc <HAL_GetTick>
 80010fe:	4602      	mov	r2, r0
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	1ad3      	subs	r3, r2, r3
 8001104:	2b02      	cmp	r3, #2
 8001106:	d901      	bls.n	800110c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001108:	2303      	movs	r3, #3
 800110a:	e1a1      	b.n	8001450 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800110c:	4b2d      	ldr	r3, [pc, #180]	; (80011c4 <HAL_RCC_OscConfig+0x26c>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f003 0302 	and.w	r3, r3, #2
 8001114:	2b00      	cmp	r3, #0
 8001116:	d0f0      	beq.n	80010fa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001118:	4b2a      	ldr	r3, [pc, #168]	; (80011c4 <HAL_RCC_OscConfig+0x26c>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	695b      	ldr	r3, [r3, #20]
 8001124:	00db      	lsls	r3, r3, #3
 8001126:	4927      	ldr	r1, [pc, #156]	; (80011c4 <HAL_RCC_OscConfig+0x26c>)
 8001128:	4313      	orrs	r3, r2
 800112a:	600b      	str	r3, [r1, #0]
 800112c:	e015      	b.n	800115a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800112e:	4b26      	ldr	r3, [pc, #152]	; (80011c8 <HAL_RCC_OscConfig+0x270>)
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001134:	f7ff fc62 	bl	80009fc <HAL_GetTick>
 8001138:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800113a:	e008      	b.n	800114e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800113c:	f7ff fc5e 	bl	80009fc <HAL_GetTick>
 8001140:	4602      	mov	r2, r0
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	2b02      	cmp	r3, #2
 8001148:	d901      	bls.n	800114e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800114a:	2303      	movs	r3, #3
 800114c:	e180      	b.n	8001450 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800114e:	4b1d      	ldr	r3, [pc, #116]	; (80011c4 <HAL_RCC_OscConfig+0x26c>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f003 0302 	and.w	r3, r3, #2
 8001156:	2b00      	cmp	r3, #0
 8001158:	d1f0      	bne.n	800113c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f003 0308 	and.w	r3, r3, #8
 8001162:	2b00      	cmp	r3, #0
 8001164:	d03a      	beq.n	80011dc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	699b      	ldr	r3, [r3, #24]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d019      	beq.n	80011a2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800116e:	4b17      	ldr	r3, [pc, #92]	; (80011cc <HAL_RCC_OscConfig+0x274>)
 8001170:	2201      	movs	r2, #1
 8001172:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001174:	f7ff fc42 	bl	80009fc <HAL_GetTick>
 8001178:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800117a:	e008      	b.n	800118e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800117c:	f7ff fc3e 	bl	80009fc <HAL_GetTick>
 8001180:	4602      	mov	r2, r0
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	2b02      	cmp	r3, #2
 8001188:	d901      	bls.n	800118e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800118a:	2303      	movs	r3, #3
 800118c:	e160      	b.n	8001450 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800118e:	4b0d      	ldr	r3, [pc, #52]	; (80011c4 <HAL_RCC_OscConfig+0x26c>)
 8001190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001192:	f003 0302 	and.w	r3, r3, #2
 8001196:	2b00      	cmp	r3, #0
 8001198:	d0f0      	beq.n	800117c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800119a:	2001      	movs	r0, #1
 800119c:	f000 faa6 	bl	80016ec <RCC_Delay>
 80011a0:	e01c      	b.n	80011dc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011a2:	4b0a      	ldr	r3, [pc, #40]	; (80011cc <HAL_RCC_OscConfig+0x274>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011a8:	f7ff fc28 	bl	80009fc <HAL_GetTick>
 80011ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011ae:	e00f      	b.n	80011d0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011b0:	f7ff fc24 	bl	80009fc <HAL_GetTick>
 80011b4:	4602      	mov	r2, r0
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	2b02      	cmp	r3, #2
 80011bc:	d908      	bls.n	80011d0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80011be:	2303      	movs	r3, #3
 80011c0:	e146      	b.n	8001450 <HAL_RCC_OscConfig+0x4f8>
 80011c2:	bf00      	nop
 80011c4:	40021000 	.word	0x40021000
 80011c8:	42420000 	.word	0x42420000
 80011cc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011d0:	4b92      	ldr	r3, [pc, #584]	; (800141c <HAL_RCC_OscConfig+0x4c4>)
 80011d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d4:	f003 0302 	and.w	r3, r3, #2
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d1e9      	bne.n	80011b0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f003 0304 	and.w	r3, r3, #4
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	f000 80a6 	beq.w	8001336 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011ea:	2300      	movs	r3, #0
 80011ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011ee:	4b8b      	ldr	r3, [pc, #556]	; (800141c <HAL_RCC_OscConfig+0x4c4>)
 80011f0:	69db      	ldr	r3, [r3, #28]
 80011f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d10d      	bne.n	8001216 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011fa:	4b88      	ldr	r3, [pc, #544]	; (800141c <HAL_RCC_OscConfig+0x4c4>)
 80011fc:	69db      	ldr	r3, [r3, #28]
 80011fe:	4a87      	ldr	r2, [pc, #540]	; (800141c <HAL_RCC_OscConfig+0x4c4>)
 8001200:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001204:	61d3      	str	r3, [r2, #28]
 8001206:	4b85      	ldr	r3, [pc, #532]	; (800141c <HAL_RCC_OscConfig+0x4c4>)
 8001208:	69db      	ldr	r3, [r3, #28]
 800120a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800120e:	60bb      	str	r3, [r7, #8]
 8001210:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001212:	2301      	movs	r3, #1
 8001214:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001216:	4b82      	ldr	r3, [pc, #520]	; (8001420 <HAL_RCC_OscConfig+0x4c8>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800121e:	2b00      	cmp	r3, #0
 8001220:	d118      	bne.n	8001254 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001222:	4b7f      	ldr	r3, [pc, #508]	; (8001420 <HAL_RCC_OscConfig+0x4c8>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a7e      	ldr	r2, [pc, #504]	; (8001420 <HAL_RCC_OscConfig+0x4c8>)
 8001228:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800122c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800122e:	f7ff fbe5 	bl	80009fc <HAL_GetTick>
 8001232:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001234:	e008      	b.n	8001248 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001236:	f7ff fbe1 	bl	80009fc <HAL_GetTick>
 800123a:	4602      	mov	r2, r0
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	1ad3      	subs	r3, r2, r3
 8001240:	2b64      	cmp	r3, #100	; 0x64
 8001242:	d901      	bls.n	8001248 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001244:	2303      	movs	r3, #3
 8001246:	e103      	b.n	8001450 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001248:	4b75      	ldr	r3, [pc, #468]	; (8001420 <HAL_RCC_OscConfig+0x4c8>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001250:	2b00      	cmp	r3, #0
 8001252:	d0f0      	beq.n	8001236 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	2b01      	cmp	r3, #1
 800125a:	d106      	bne.n	800126a <HAL_RCC_OscConfig+0x312>
 800125c:	4b6f      	ldr	r3, [pc, #444]	; (800141c <HAL_RCC_OscConfig+0x4c4>)
 800125e:	6a1b      	ldr	r3, [r3, #32]
 8001260:	4a6e      	ldr	r2, [pc, #440]	; (800141c <HAL_RCC_OscConfig+0x4c4>)
 8001262:	f043 0301 	orr.w	r3, r3, #1
 8001266:	6213      	str	r3, [r2, #32]
 8001268:	e02d      	b.n	80012c6 <HAL_RCC_OscConfig+0x36e>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	68db      	ldr	r3, [r3, #12]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d10c      	bne.n	800128c <HAL_RCC_OscConfig+0x334>
 8001272:	4b6a      	ldr	r3, [pc, #424]	; (800141c <HAL_RCC_OscConfig+0x4c4>)
 8001274:	6a1b      	ldr	r3, [r3, #32]
 8001276:	4a69      	ldr	r2, [pc, #420]	; (800141c <HAL_RCC_OscConfig+0x4c4>)
 8001278:	f023 0301 	bic.w	r3, r3, #1
 800127c:	6213      	str	r3, [r2, #32]
 800127e:	4b67      	ldr	r3, [pc, #412]	; (800141c <HAL_RCC_OscConfig+0x4c4>)
 8001280:	6a1b      	ldr	r3, [r3, #32]
 8001282:	4a66      	ldr	r2, [pc, #408]	; (800141c <HAL_RCC_OscConfig+0x4c4>)
 8001284:	f023 0304 	bic.w	r3, r3, #4
 8001288:	6213      	str	r3, [r2, #32]
 800128a:	e01c      	b.n	80012c6 <HAL_RCC_OscConfig+0x36e>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	2b05      	cmp	r3, #5
 8001292:	d10c      	bne.n	80012ae <HAL_RCC_OscConfig+0x356>
 8001294:	4b61      	ldr	r3, [pc, #388]	; (800141c <HAL_RCC_OscConfig+0x4c4>)
 8001296:	6a1b      	ldr	r3, [r3, #32]
 8001298:	4a60      	ldr	r2, [pc, #384]	; (800141c <HAL_RCC_OscConfig+0x4c4>)
 800129a:	f043 0304 	orr.w	r3, r3, #4
 800129e:	6213      	str	r3, [r2, #32]
 80012a0:	4b5e      	ldr	r3, [pc, #376]	; (800141c <HAL_RCC_OscConfig+0x4c4>)
 80012a2:	6a1b      	ldr	r3, [r3, #32]
 80012a4:	4a5d      	ldr	r2, [pc, #372]	; (800141c <HAL_RCC_OscConfig+0x4c4>)
 80012a6:	f043 0301 	orr.w	r3, r3, #1
 80012aa:	6213      	str	r3, [r2, #32]
 80012ac:	e00b      	b.n	80012c6 <HAL_RCC_OscConfig+0x36e>
 80012ae:	4b5b      	ldr	r3, [pc, #364]	; (800141c <HAL_RCC_OscConfig+0x4c4>)
 80012b0:	6a1b      	ldr	r3, [r3, #32]
 80012b2:	4a5a      	ldr	r2, [pc, #360]	; (800141c <HAL_RCC_OscConfig+0x4c4>)
 80012b4:	f023 0301 	bic.w	r3, r3, #1
 80012b8:	6213      	str	r3, [r2, #32]
 80012ba:	4b58      	ldr	r3, [pc, #352]	; (800141c <HAL_RCC_OscConfig+0x4c4>)
 80012bc:	6a1b      	ldr	r3, [r3, #32]
 80012be:	4a57      	ldr	r2, [pc, #348]	; (800141c <HAL_RCC_OscConfig+0x4c4>)
 80012c0:	f023 0304 	bic.w	r3, r3, #4
 80012c4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	68db      	ldr	r3, [r3, #12]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d015      	beq.n	80012fa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012ce:	f7ff fb95 	bl	80009fc <HAL_GetTick>
 80012d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012d4:	e00a      	b.n	80012ec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012d6:	f7ff fb91 	bl	80009fc <HAL_GetTick>
 80012da:	4602      	mov	r2, r0
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	1ad3      	subs	r3, r2, r3
 80012e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d901      	bls.n	80012ec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80012e8:	2303      	movs	r3, #3
 80012ea:	e0b1      	b.n	8001450 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012ec:	4b4b      	ldr	r3, [pc, #300]	; (800141c <HAL_RCC_OscConfig+0x4c4>)
 80012ee:	6a1b      	ldr	r3, [r3, #32]
 80012f0:	f003 0302 	and.w	r3, r3, #2
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d0ee      	beq.n	80012d6 <HAL_RCC_OscConfig+0x37e>
 80012f8:	e014      	b.n	8001324 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012fa:	f7ff fb7f 	bl	80009fc <HAL_GetTick>
 80012fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001300:	e00a      	b.n	8001318 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001302:	f7ff fb7b 	bl	80009fc <HAL_GetTick>
 8001306:	4602      	mov	r2, r0
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	1ad3      	subs	r3, r2, r3
 800130c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001310:	4293      	cmp	r3, r2
 8001312:	d901      	bls.n	8001318 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001314:	2303      	movs	r3, #3
 8001316:	e09b      	b.n	8001450 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001318:	4b40      	ldr	r3, [pc, #256]	; (800141c <HAL_RCC_OscConfig+0x4c4>)
 800131a:	6a1b      	ldr	r3, [r3, #32]
 800131c:	f003 0302 	and.w	r3, r3, #2
 8001320:	2b00      	cmp	r3, #0
 8001322:	d1ee      	bne.n	8001302 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001324:	7dfb      	ldrb	r3, [r7, #23]
 8001326:	2b01      	cmp	r3, #1
 8001328:	d105      	bne.n	8001336 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800132a:	4b3c      	ldr	r3, [pc, #240]	; (800141c <HAL_RCC_OscConfig+0x4c4>)
 800132c:	69db      	ldr	r3, [r3, #28]
 800132e:	4a3b      	ldr	r2, [pc, #236]	; (800141c <HAL_RCC_OscConfig+0x4c4>)
 8001330:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001334:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	69db      	ldr	r3, [r3, #28]
 800133a:	2b00      	cmp	r3, #0
 800133c:	f000 8087 	beq.w	800144e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001340:	4b36      	ldr	r3, [pc, #216]	; (800141c <HAL_RCC_OscConfig+0x4c4>)
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f003 030c 	and.w	r3, r3, #12
 8001348:	2b08      	cmp	r3, #8
 800134a:	d061      	beq.n	8001410 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	69db      	ldr	r3, [r3, #28]
 8001350:	2b02      	cmp	r3, #2
 8001352:	d146      	bne.n	80013e2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001354:	4b33      	ldr	r3, [pc, #204]	; (8001424 <HAL_RCC_OscConfig+0x4cc>)
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800135a:	f7ff fb4f 	bl	80009fc <HAL_GetTick>
 800135e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001360:	e008      	b.n	8001374 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001362:	f7ff fb4b 	bl	80009fc <HAL_GetTick>
 8001366:	4602      	mov	r2, r0
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	2b02      	cmp	r3, #2
 800136e:	d901      	bls.n	8001374 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001370:	2303      	movs	r3, #3
 8001372:	e06d      	b.n	8001450 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001374:	4b29      	ldr	r3, [pc, #164]	; (800141c <HAL_RCC_OscConfig+0x4c4>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800137c:	2b00      	cmp	r3, #0
 800137e:	d1f0      	bne.n	8001362 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6a1b      	ldr	r3, [r3, #32]
 8001384:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001388:	d108      	bne.n	800139c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800138a:	4b24      	ldr	r3, [pc, #144]	; (800141c <HAL_RCC_OscConfig+0x4c4>)
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	689b      	ldr	r3, [r3, #8]
 8001396:	4921      	ldr	r1, [pc, #132]	; (800141c <HAL_RCC_OscConfig+0x4c4>)
 8001398:	4313      	orrs	r3, r2
 800139a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800139c:	4b1f      	ldr	r3, [pc, #124]	; (800141c <HAL_RCC_OscConfig+0x4c4>)
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6a19      	ldr	r1, [r3, #32]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ac:	430b      	orrs	r3, r1
 80013ae:	491b      	ldr	r1, [pc, #108]	; (800141c <HAL_RCC_OscConfig+0x4c4>)
 80013b0:	4313      	orrs	r3, r2
 80013b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013b4:	4b1b      	ldr	r3, [pc, #108]	; (8001424 <HAL_RCC_OscConfig+0x4cc>)
 80013b6:	2201      	movs	r2, #1
 80013b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ba:	f7ff fb1f 	bl	80009fc <HAL_GetTick>
 80013be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013c0:	e008      	b.n	80013d4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013c2:	f7ff fb1b 	bl	80009fc <HAL_GetTick>
 80013c6:	4602      	mov	r2, r0
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d901      	bls.n	80013d4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80013d0:	2303      	movs	r3, #3
 80013d2:	e03d      	b.n	8001450 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013d4:	4b11      	ldr	r3, [pc, #68]	; (800141c <HAL_RCC_OscConfig+0x4c4>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d0f0      	beq.n	80013c2 <HAL_RCC_OscConfig+0x46a>
 80013e0:	e035      	b.n	800144e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013e2:	4b10      	ldr	r3, [pc, #64]	; (8001424 <HAL_RCC_OscConfig+0x4cc>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e8:	f7ff fb08 	bl	80009fc <HAL_GetTick>
 80013ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013ee:	e008      	b.n	8001402 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013f0:	f7ff fb04 	bl	80009fc <HAL_GetTick>
 80013f4:	4602      	mov	r2, r0
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d901      	bls.n	8001402 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80013fe:	2303      	movs	r3, #3
 8001400:	e026      	b.n	8001450 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001402:	4b06      	ldr	r3, [pc, #24]	; (800141c <HAL_RCC_OscConfig+0x4c4>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d1f0      	bne.n	80013f0 <HAL_RCC_OscConfig+0x498>
 800140e:	e01e      	b.n	800144e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	69db      	ldr	r3, [r3, #28]
 8001414:	2b01      	cmp	r3, #1
 8001416:	d107      	bne.n	8001428 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001418:	2301      	movs	r3, #1
 800141a:	e019      	b.n	8001450 <HAL_RCC_OscConfig+0x4f8>
 800141c:	40021000 	.word	0x40021000
 8001420:	40007000 	.word	0x40007000
 8001424:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001428:	4b0b      	ldr	r3, [pc, #44]	; (8001458 <HAL_RCC_OscConfig+0x500>)
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6a1b      	ldr	r3, [r3, #32]
 8001438:	429a      	cmp	r2, r3
 800143a:	d106      	bne.n	800144a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001446:	429a      	cmp	r2, r3
 8001448:	d001      	beq.n	800144e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e000      	b.n	8001450 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800144e:	2300      	movs	r3, #0
}
 8001450:	4618      	mov	r0, r3
 8001452:	3718      	adds	r7, #24
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	40021000 	.word	0x40021000

0800145c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d101      	bne.n	8001470 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	e0d0      	b.n	8001612 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001470:	4b6a      	ldr	r3, [pc, #424]	; (800161c <HAL_RCC_ClockConfig+0x1c0>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 0307 	and.w	r3, r3, #7
 8001478:	683a      	ldr	r2, [r7, #0]
 800147a:	429a      	cmp	r2, r3
 800147c:	d910      	bls.n	80014a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800147e:	4b67      	ldr	r3, [pc, #412]	; (800161c <HAL_RCC_ClockConfig+0x1c0>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f023 0207 	bic.w	r2, r3, #7
 8001486:	4965      	ldr	r1, [pc, #404]	; (800161c <HAL_RCC_ClockConfig+0x1c0>)
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	4313      	orrs	r3, r2
 800148c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800148e:	4b63      	ldr	r3, [pc, #396]	; (800161c <HAL_RCC_ClockConfig+0x1c0>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 0307 	and.w	r3, r3, #7
 8001496:	683a      	ldr	r2, [r7, #0]
 8001498:	429a      	cmp	r2, r3
 800149a:	d001      	beq.n	80014a0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	e0b8      	b.n	8001612 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 0302 	and.w	r3, r3, #2
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d020      	beq.n	80014ee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 0304 	and.w	r3, r3, #4
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d005      	beq.n	80014c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014b8:	4b59      	ldr	r3, [pc, #356]	; (8001620 <HAL_RCC_ClockConfig+0x1c4>)
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	4a58      	ldr	r2, [pc, #352]	; (8001620 <HAL_RCC_ClockConfig+0x1c4>)
 80014be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80014c2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 0308 	and.w	r3, r3, #8
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d005      	beq.n	80014dc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014d0:	4b53      	ldr	r3, [pc, #332]	; (8001620 <HAL_RCC_ClockConfig+0x1c4>)
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	4a52      	ldr	r2, [pc, #328]	; (8001620 <HAL_RCC_ClockConfig+0x1c4>)
 80014d6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80014da:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014dc:	4b50      	ldr	r3, [pc, #320]	; (8001620 <HAL_RCC_ClockConfig+0x1c4>)
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	494d      	ldr	r1, [pc, #308]	; (8001620 <HAL_RCC_ClockConfig+0x1c4>)
 80014ea:	4313      	orrs	r3, r2
 80014ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 0301 	and.w	r3, r3, #1
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d040      	beq.n	800157c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d107      	bne.n	8001512 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001502:	4b47      	ldr	r3, [pc, #284]	; (8001620 <HAL_RCC_ClockConfig+0x1c4>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d115      	bne.n	800153a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e07f      	b.n	8001612 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	2b02      	cmp	r3, #2
 8001518:	d107      	bne.n	800152a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800151a:	4b41      	ldr	r3, [pc, #260]	; (8001620 <HAL_RCC_ClockConfig+0x1c4>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d109      	bne.n	800153a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e073      	b.n	8001612 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800152a:	4b3d      	ldr	r3, [pc, #244]	; (8001620 <HAL_RCC_ClockConfig+0x1c4>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	2b00      	cmp	r3, #0
 8001534:	d101      	bne.n	800153a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e06b      	b.n	8001612 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800153a:	4b39      	ldr	r3, [pc, #228]	; (8001620 <HAL_RCC_ClockConfig+0x1c4>)
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f023 0203 	bic.w	r2, r3, #3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	4936      	ldr	r1, [pc, #216]	; (8001620 <HAL_RCC_ClockConfig+0x1c4>)
 8001548:	4313      	orrs	r3, r2
 800154a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800154c:	f7ff fa56 	bl	80009fc <HAL_GetTick>
 8001550:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001552:	e00a      	b.n	800156a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001554:	f7ff fa52 	bl	80009fc <HAL_GetTick>
 8001558:	4602      	mov	r2, r0
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001562:	4293      	cmp	r3, r2
 8001564:	d901      	bls.n	800156a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e053      	b.n	8001612 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800156a:	4b2d      	ldr	r3, [pc, #180]	; (8001620 <HAL_RCC_ClockConfig+0x1c4>)
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f003 020c 	and.w	r2, r3, #12
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	429a      	cmp	r2, r3
 800157a:	d1eb      	bne.n	8001554 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800157c:	4b27      	ldr	r3, [pc, #156]	; (800161c <HAL_RCC_ClockConfig+0x1c0>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 0307 	and.w	r3, r3, #7
 8001584:	683a      	ldr	r2, [r7, #0]
 8001586:	429a      	cmp	r2, r3
 8001588:	d210      	bcs.n	80015ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800158a:	4b24      	ldr	r3, [pc, #144]	; (800161c <HAL_RCC_ClockConfig+0x1c0>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f023 0207 	bic.w	r2, r3, #7
 8001592:	4922      	ldr	r1, [pc, #136]	; (800161c <HAL_RCC_ClockConfig+0x1c0>)
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	4313      	orrs	r3, r2
 8001598:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800159a:	4b20      	ldr	r3, [pc, #128]	; (800161c <HAL_RCC_ClockConfig+0x1c0>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0307 	and.w	r3, r3, #7
 80015a2:	683a      	ldr	r2, [r7, #0]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d001      	beq.n	80015ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	e032      	b.n	8001612 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 0304 	and.w	r3, r3, #4
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d008      	beq.n	80015ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015b8:	4b19      	ldr	r3, [pc, #100]	; (8001620 <HAL_RCC_ClockConfig+0x1c4>)
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	4916      	ldr	r1, [pc, #88]	; (8001620 <HAL_RCC_ClockConfig+0x1c4>)
 80015c6:	4313      	orrs	r3, r2
 80015c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 0308 	and.w	r3, r3, #8
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d009      	beq.n	80015ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80015d6:	4b12      	ldr	r3, [pc, #72]	; (8001620 <HAL_RCC_ClockConfig+0x1c4>)
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	691b      	ldr	r3, [r3, #16]
 80015e2:	00db      	lsls	r3, r3, #3
 80015e4:	490e      	ldr	r1, [pc, #56]	; (8001620 <HAL_RCC_ClockConfig+0x1c4>)
 80015e6:	4313      	orrs	r3, r2
 80015e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80015ea:	f000 f821 	bl	8001630 <HAL_RCC_GetSysClockFreq>
 80015ee:	4602      	mov	r2, r0
 80015f0:	4b0b      	ldr	r3, [pc, #44]	; (8001620 <HAL_RCC_ClockConfig+0x1c4>)
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	091b      	lsrs	r3, r3, #4
 80015f6:	f003 030f 	and.w	r3, r3, #15
 80015fa:	490a      	ldr	r1, [pc, #40]	; (8001624 <HAL_RCC_ClockConfig+0x1c8>)
 80015fc:	5ccb      	ldrb	r3, [r1, r3]
 80015fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001602:	4a09      	ldr	r2, [pc, #36]	; (8001628 <HAL_RCC_ClockConfig+0x1cc>)
 8001604:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001606:	4b09      	ldr	r3, [pc, #36]	; (800162c <HAL_RCC_ClockConfig+0x1d0>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4618      	mov	r0, r3
 800160c:	f7ff f9b4 	bl	8000978 <HAL_InitTick>

  return HAL_OK;
 8001610:	2300      	movs	r3, #0
}
 8001612:	4618      	mov	r0, r3
 8001614:	3710      	adds	r7, #16
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	40022000 	.word	0x40022000
 8001620:	40021000 	.word	0x40021000
 8001624:	080020b8 	.word	0x080020b8
 8001628:	20000020 	.word	0x20000020
 800162c:	20000024 	.word	0x20000024

08001630 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001630:	b480      	push	{r7}
 8001632:	b087      	sub	sp, #28
 8001634:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001636:	2300      	movs	r3, #0
 8001638:	60fb      	str	r3, [r7, #12]
 800163a:	2300      	movs	r3, #0
 800163c:	60bb      	str	r3, [r7, #8]
 800163e:	2300      	movs	r3, #0
 8001640:	617b      	str	r3, [r7, #20]
 8001642:	2300      	movs	r3, #0
 8001644:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001646:	2300      	movs	r3, #0
 8001648:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800164a:	4b1e      	ldr	r3, [pc, #120]	; (80016c4 <HAL_RCC_GetSysClockFreq+0x94>)
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	f003 030c 	and.w	r3, r3, #12
 8001656:	2b04      	cmp	r3, #4
 8001658:	d002      	beq.n	8001660 <HAL_RCC_GetSysClockFreq+0x30>
 800165a:	2b08      	cmp	r3, #8
 800165c:	d003      	beq.n	8001666 <HAL_RCC_GetSysClockFreq+0x36>
 800165e:	e027      	b.n	80016b0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001660:	4b19      	ldr	r3, [pc, #100]	; (80016c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001662:	613b      	str	r3, [r7, #16]
      break;
 8001664:	e027      	b.n	80016b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	0c9b      	lsrs	r3, r3, #18
 800166a:	f003 030f 	and.w	r3, r3, #15
 800166e:	4a17      	ldr	r2, [pc, #92]	; (80016cc <HAL_RCC_GetSysClockFreq+0x9c>)
 8001670:	5cd3      	ldrb	r3, [r2, r3]
 8001672:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d010      	beq.n	80016a0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800167e:	4b11      	ldr	r3, [pc, #68]	; (80016c4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	0c5b      	lsrs	r3, r3, #17
 8001684:	f003 0301 	and.w	r3, r3, #1
 8001688:	4a11      	ldr	r2, [pc, #68]	; (80016d0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800168a:	5cd3      	ldrb	r3, [r2, r3]
 800168c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4a0d      	ldr	r2, [pc, #52]	; (80016c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001692:	fb03 f202 	mul.w	r2, r3, r2
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	fbb2 f3f3 	udiv	r3, r2, r3
 800169c:	617b      	str	r3, [r7, #20]
 800169e:	e004      	b.n	80016aa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	4a0c      	ldr	r2, [pc, #48]	; (80016d4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80016a4:	fb02 f303 	mul.w	r3, r2, r3
 80016a8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	613b      	str	r3, [r7, #16]
      break;
 80016ae:	e002      	b.n	80016b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80016b0:	4b05      	ldr	r3, [pc, #20]	; (80016c8 <HAL_RCC_GetSysClockFreq+0x98>)
 80016b2:	613b      	str	r3, [r7, #16]
      break;
 80016b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016b6:	693b      	ldr	r3, [r7, #16]
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	371c      	adds	r7, #28
 80016bc:	46bd      	mov	sp, r7
 80016be:	bc80      	pop	{r7}
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	40021000 	.word	0x40021000
 80016c8:	007a1200 	.word	0x007a1200
 80016cc:	080020c8 	.word	0x080020c8
 80016d0:	080020d8 	.word	0x080020d8
 80016d4:	003d0900 	.word	0x003d0900

080016d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016dc:	4b02      	ldr	r3, [pc, #8]	; (80016e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80016de:	681b      	ldr	r3, [r3, #0]
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bc80      	pop	{r7}
 80016e6:	4770      	bx	lr
 80016e8:	20000020 	.word	0x20000020

080016ec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b085      	sub	sp, #20
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80016f4:	4b0a      	ldr	r3, [pc, #40]	; (8001720 <RCC_Delay+0x34>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a0a      	ldr	r2, [pc, #40]	; (8001724 <RCC_Delay+0x38>)
 80016fa:	fba2 2303 	umull	r2, r3, r2, r3
 80016fe:	0a5b      	lsrs	r3, r3, #9
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	fb02 f303 	mul.w	r3, r2, r3
 8001706:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001708:	bf00      	nop
  }
  while (Delay --);
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	1e5a      	subs	r2, r3, #1
 800170e:	60fa      	str	r2, [r7, #12]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d1f9      	bne.n	8001708 <RCC_Delay+0x1c>
}
 8001714:	bf00      	nop
 8001716:	bf00      	nop
 8001718:	3714      	adds	r7, #20
 800171a:	46bd      	mov	sp, r7
 800171c:	bc80      	pop	{r7}
 800171e:	4770      	bx	lr
 8001720:	20000020 	.word	0x20000020
 8001724:	10624dd3 	.word	0x10624dd3

08001728 <__errno>:
 8001728:	4b01      	ldr	r3, [pc, #4]	; (8001730 <__errno+0x8>)
 800172a:	6818      	ldr	r0, [r3, #0]
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	2000002c 	.word	0x2000002c

08001734 <__libc_init_array>:
 8001734:	b570      	push	{r4, r5, r6, lr}
 8001736:	2600      	movs	r6, #0
 8001738:	4d0c      	ldr	r5, [pc, #48]	; (800176c <__libc_init_array+0x38>)
 800173a:	4c0d      	ldr	r4, [pc, #52]	; (8001770 <__libc_init_array+0x3c>)
 800173c:	1b64      	subs	r4, r4, r5
 800173e:	10a4      	asrs	r4, r4, #2
 8001740:	42a6      	cmp	r6, r4
 8001742:	d109      	bne.n	8001758 <__libc_init_array+0x24>
 8001744:	f000 fc9c 	bl	8002080 <_init>
 8001748:	2600      	movs	r6, #0
 800174a:	4d0a      	ldr	r5, [pc, #40]	; (8001774 <__libc_init_array+0x40>)
 800174c:	4c0a      	ldr	r4, [pc, #40]	; (8001778 <__libc_init_array+0x44>)
 800174e:	1b64      	subs	r4, r4, r5
 8001750:	10a4      	asrs	r4, r4, #2
 8001752:	42a6      	cmp	r6, r4
 8001754:	d105      	bne.n	8001762 <__libc_init_array+0x2e>
 8001756:	bd70      	pop	{r4, r5, r6, pc}
 8001758:	f855 3b04 	ldr.w	r3, [r5], #4
 800175c:	4798      	blx	r3
 800175e:	3601      	adds	r6, #1
 8001760:	e7ee      	b.n	8001740 <__libc_init_array+0xc>
 8001762:	f855 3b04 	ldr.w	r3, [r5], #4
 8001766:	4798      	blx	r3
 8001768:	3601      	adds	r6, #1
 800176a:	e7f2      	b.n	8001752 <__libc_init_array+0x1e>
 800176c:	08002110 	.word	0x08002110
 8001770:	08002110 	.word	0x08002110
 8001774:	08002110 	.word	0x08002110
 8001778:	08002114 	.word	0x08002114

0800177c <memset>:
 800177c:	4603      	mov	r3, r0
 800177e:	4402      	add	r2, r0
 8001780:	4293      	cmp	r3, r2
 8001782:	d100      	bne.n	8001786 <memset+0xa>
 8001784:	4770      	bx	lr
 8001786:	f803 1b01 	strb.w	r1, [r3], #1
 800178a:	e7f9      	b.n	8001780 <memset+0x4>

0800178c <siprintf>:
 800178c:	b40e      	push	{r1, r2, r3}
 800178e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001792:	b500      	push	{lr}
 8001794:	b09c      	sub	sp, #112	; 0x70
 8001796:	ab1d      	add	r3, sp, #116	; 0x74
 8001798:	9002      	str	r0, [sp, #8]
 800179a:	9006      	str	r0, [sp, #24]
 800179c:	9107      	str	r1, [sp, #28]
 800179e:	9104      	str	r1, [sp, #16]
 80017a0:	4808      	ldr	r0, [pc, #32]	; (80017c4 <siprintf+0x38>)
 80017a2:	4909      	ldr	r1, [pc, #36]	; (80017c8 <siprintf+0x3c>)
 80017a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80017a8:	9105      	str	r1, [sp, #20]
 80017aa:	6800      	ldr	r0, [r0, #0]
 80017ac:	a902      	add	r1, sp, #8
 80017ae:	9301      	str	r3, [sp, #4]
 80017b0:	f000 f868 	bl	8001884 <_svfiprintf_r>
 80017b4:	2200      	movs	r2, #0
 80017b6:	9b02      	ldr	r3, [sp, #8]
 80017b8:	701a      	strb	r2, [r3, #0]
 80017ba:	b01c      	add	sp, #112	; 0x70
 80017bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80017c0:	b003      	add	sp, #12
 80017c2:	4770      	bx	lr
 80017c4:	2000002c 	.word	0x2000002c
 80017c8:	ffff0208 	.word	0xffff0208

080017cc <__ssputs_r>:
 80017cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80017d0:	688e      	ldr	r6, [r1, #8]
 80017d2:	4682      	mov	sl, r0
 80017d4:	429e      	cmp	r6, r3
 80017d6:	460c      	mov	r4, r1
 80017d8:	4690      	mov	r8, r2
 80017da:	461f      	mov	r7, r3
 80017dc:	d838      	bhi.n	8001850 <__ssputs_r+0x84>
 80017de:	898a      	ldrh	r2, [r1, #12]
 80017e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80017e4:	d032      	beq.n	800184c <__ssputs_r+0x80>
 80017e6:	6825      	ldr	r5, [r4, #0]
 80017e8:	6909      	ldr	r1, [r1, #16]
 80017ea:	3301      	adds	r3, #1
 80017ec:	eba5 0901 	sub.w	r9, r5, r1
 80017f0:	6965      	ldr	r5, [r4, #20]
 80017f2:	444b      	add	r3, r9
 80017f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80017f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80017fc:	106d      	asrs	r5, r5, #1
 80017fe:	429d      	cmp	r5, r3
 8001800:	bf38      	it	cc
 8001802:	461d      	movcc	r5, r3
 8001804:	0553      	lsls	r3, r2, #21
 8001806:	d531      	bpl.n	800186c <__ssputs_r+0xa0>
 8001808:	4629      	mov	r1, r5
 800180a:	f000 fb6f 	bl	8001eec <_malloc_r>
 800180e:	4606      	mov	r6, r0
 8001810:	b950      	cbnz	r0, 8001828 <__ssputs_r+0x5c>
 8001812:	230c      	movs	r3, #12
 8001814:	f04f 30ff 	mov.w	r0, #4294967295
 8001818:	f8ca 3000 	str.w	r3, [sl]
 800181c:	89a3      	ldrh	r3, [r4, #12]
 800181e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001822:	81a3      	strh	r3, [r4, #12]
 8001824:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001828:	464a      	mov	r2, r9
 800182a:	6921      	ldr	r1, [r4, #16]
 800182c:	f000 face 	bl	8001dcc <memcpy>
 8001830:	89a3      	ldrh	r3, [r4, #12]
 8001832:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001836:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800183a:	81a3      	strh	r3, [r4, #12]
 800183c:	6126      	str	r6, [r4, #16]
 800183e:	444e      	add	r6, r9
 8001840:	6026      	str	r6, [r4, #0]
 8001842:	463e      	mov	r6, r7
 8001844:	6165      	str	r5, [r4, #20]
 8001846:	eba5 0509 	sub.w	r5, r5, r9
 800184a:	60a5      	str	r5, [r4, #8]
 800184c:	42be      	cmp	r6, r7
 800184e:	d900      	bls.n	8001852 <__ssputs_r+0x86>
 8001850:	463e      	mov	r6, r7
 8001852:	4632      	mov	r2, r6
 8001854:	4641      	mov	r1, r8
 8001856:	6820      	ldr	r0, [r4, #0]
 8001858:	f000 fac6 	bl	8001de8 <memmove>
 800185c:	68a3      	ldr	r3, [r4, #8]
 800185e:	2000      	movs	r0, #0
 8001860:	1b9b      	subs	r3, r3, r6
 8001862:	60a3      	str	r3, [r4, #8]
 8001864:	6823      	ldr	r3, [r4, #0]
 8001866:	4433      	add	r3, r6
 8001868:	6023      	str	r3, [r4, #0]
 800186a:	e7db      	b.n	8001824 <__ssputs_r+0x58>
 800186c:	462a      	mov	r2, r5
 800186e:	f000 fbb1 	bl	8001fd4 <_realloc_r>
 8001872:	4606      	mov	r6, r0
 8001874:	2800      	cmp	r0, #0
 8001876:	d1e1      	bne.n	800183c <__ssputs_r+0x70>
 8001878:	4650      	mov	r0, sl
 800187a:	6921      	ldr	r1, [r4, #16]
 800187c:	f000 face 	bl	8001e1c <_free_r>
 8001880:	e7c7      	b.n	8001812 <__ssputs_r+0x46>
	...

08001884 <_svfiprintf_r>:
 8001884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001888:	4698      	mov	r8, r3
 800188a:	898b      	ldrh	r3, [r1, #12]
 800188c:	4607      	mov	r7, r0
 800188e:	061b      	lsls	r3, r3, #24
 8001890:	460d      	mov	r5, r1
 8001892:	4614      	mov	r4, r2
 8001894:	b09d      	sub	sp, #116	; 0x74
 8001896:	d50e      	bpl.n	80018b6 <_svfiprintf_r+0x32>
 8001898:	690b      	ldr	r3, [r1, #16]
 800189a:	b963      	cbnz	r3, 80018b6 <_svfiprintf_r+0x32>
 800189c:	2140      	movs	r1, #64	; 0x40
 800189e:	f000 fb25 	bl	8001eec <_malloc_r>
 80018a2:	6028      	str	r0, [r5, #0]
 80018a4:	6128      	str	r0, [r5, #16]
 80018a6:	b920      	cbnz	r0, 80018b2 <_svfiprintf_r+0x2e>
 80018a8:	230c      	movs	r3, #12
 80018aa:	603b      	str	r3, [r7, #0]
 80018ac:	f04f 30ff 	mov.w	r0, #4294967295
 80018b0:	e0d1      	b.n	8001a56 <_svfiprintf_r+0x1d2>
 80018b2:	2340      	movs	r3, #64	; 0x40
 80018b4:	616b      	str	r3, [r5, #20]
 80018b6:	2300      	movs	r3, #0
 80018b8:	9309      	str	r3, [sp, #36]	; 0x24
 80018ba:	2320      	movs	r3, #32
 80018bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80018c0:	2330      	movs	r3, #48	; 0x30
 80018c2:	f04f 0901 	mov.w	r9, #1
 80018c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80018ca:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8001a70 <_svfiprintf_r+0x1ec>
 80018ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80018d2:	4623      	mov	r3, r4
 80018d4:	469a      	mov	sl, r3
 80018d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80018da:	b10a      	cbz	r2, 80018e0 <_svfiprintf_r+0x5c>
 80018dc:	2a25      	cmp	r2, #37	; 0x25
 80018de:	d1f9      	bne.n	80018d4 <_svfiprintf_r+0x50>
 80018e0:	ebba 0b04 	subs.w	fp, sl, r4
 80018e4:	d00b      	beq.n	80018fe <_svfiprintf_r+0x7a>
 80018e6:	465b      	mov	r3, fp
 80018e8:	4622      	mov	r2, r4
 80018ea:	4629      	mov	r1, r5
 80018ec:	4638      	mov	r0, r7
 80018ee:	f7ff ff6d 	bl	80017cc <__ssputs_r>
 80018f2:	3001      	adds	r0, #1
 80018f4:	f000 80aa 	beq.w	8001a4c <_svfiprintf_r+0x1c8>
 80018f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80018fa:	445a      	add	r2, fp
 80018fc:	9209      	str	r2, [sp, #36]	; 0x24
 80018fe:	f89a 3000 	ldrb.w	r3, [sl]
 8001902:	2b00      	cmp	r3, #0
 8001904:	f000 80a2 	beq.w	8001a4c <_svfiprintf_r+0x1c8>
 8001908:	2300      	movs	r3, #0
 800190a:	f04f 32ff 	mov.w	r2, #4294967295
 800190e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001912:	f10a 0a01 	add.w	sl, sl, #1
 8001916:	9304      	str	r3, [sp, #16]
 8001918:	9307      	str	r3, [sp, #28]
 800191a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800191e:	931a      	str	r3, [sp, #104]	; 0x68
 8001920:	4654      	mov	r4, sl
 8001922:	2205      	movs	r2, #5
 8001924:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001928:	4851      	ldr	r0, [pc, #324]	; (8001a70 <_svfiprintf_r+0x1ec>)
 800192a:	f000 fa41 	bl	8001db0 <memchr>
 800192e:	9a04      	ldr	r2, [sp, #16]
 8001930:	b9d8      	cbnz	r0, 800196a <_svfiprintf_r+0xe6>
 8001932:	06d0      	lsls	r0, r2, #27
 8001934:	bf44      	itt	mi
 8001936:	2320      	movmi	r3, #32
 8001938:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800193c:	0711      	lsls	r1, r2, #28
 800193e:	bf44      	itt	mi
 8001940:	232b      	movmi	r3, #43	; 0x2b
 8001942:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001946:	f89a 3000 	ldrb.w	r3, [sl]
 800194a:	2b2a      	cmp	r3, #42	; 0x2a
 800194c:	d015      	beq.n	800197a <_svfiprintf_r+0xf6>
 800194e:	4654      	mov	r4, sl
 8001950:	2000      	movs	r0, #0
 8001952:	f04f 0c0a 	mov.w	ip, #10
 8001956:	9a07      	ldr	r2, [sp, #28]
 8001958:	4621      	mov	r1, r4
 800195a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800195e:	3b30      	subs	r3, #48	; 0x30
 8001960:	2b09      	cmp	r3, #9
 8001962:	d94e      	bls.n	8001a02 <_svfiprintf_r+0x17e>
 8001964:	b1b0      	cbz	r0, 8001994 <_svfiprintf_r+0x110>
 8001966:	9207      	str	r2, [sp, #28]
 8001968:	e014      	b.n	8001994 <_svfiprintf_r+0x110>
 800196a:	eba0 0308 	sub.w	r3, r0, r8
 800196e:	fa09 f303 	lsl.w	r3, r9, r3
 8001972:	4313      	orrs	r3, r2
 8001974:	46a2      	mov	sl, r4
 8001976:	9304      	str	r3, [sp, #16]
 8001978:	e7d2      	b.n	8001920 <_svfiprintf_r+0x9c>
 800197a:	9b03      	ldr	r3, [sp, #12]
 800197c:	1d19      	adds	r1, r3, #4
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	9103      	str	r1, [sp, #12]
 8001982:	2b00      	cmp	r3, #0
 8001984:	bfbb      	ittet	lt
 8001986:	425b      	neglt	r3, r3
 8001988:	f042 0202 	orrlt.w	r2, r2, #2
 800198c:	9307      	strge	r3, [sp, #28]
 800198e:	9307      	strlt	r3, [sp, #28]
 8001990:	bfb8      	it	lt
 8001992:	9204      	strlt	r2, [sp, #16]
 8001994:	7823      	ldrb	r3, [r4, #0]
 8001996:	2b2e      	cmp	r3, #46	; 0x2e
 8001998:	d10c      	bne.n	80019b4 <_svfiprintf_r+0x130>
 800199a:	7863      	ldrb	r3, [r4, #1]
 800199c:	2b2a      	cmp	r3, #42	; 0x2a
 800199e:	d135      	bne.n	8001a0c <_svfiprintf_r+0x188>
 80019a0:	9b03      	ldr	r3, [sp, #12]
 80019a2:	3402      	adds	r4, #2
 80019a4:	1d1a      	adds	r2, r3, #4
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	9203      	str	r2, [sp, #12]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	bfb8      	it	lt
 80019ae:	f04f 33ff 	movlt.w	r3, #4294967295
 80019b2:	9305      	str	r3, [sp, #20]
 80019b4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8001a74 <_svfiprintf_r+0x1f0>
 80019b8:	2203      	movs	r2, #3
 80019ba:	4650      	mov	r0, sl
 80019bc:	7821      	ldrb	r1, [r4, #0]
 80019be:	f000 f9f7 	bl	8001db0 <memchr>
 80019c2:	b140      	cbz	r0, 80019d6 <_svfiprintf_r+0x152>
 80019c4:	2340      	movs	r3, #64	; 0x40
 80019c6:	eba0 000a 	sub.w	r0, r0, sl
 80019ca:	fa03 f000 	lsl.w	r0, r3, r0
 80019ce:	9b04      	ldr	r3, [sp, #16]
 80019d0:	3401      	adds	r4, #1
 80019d2:	4303      	orrs	r3, r0
 80019d4:	9304      	str	r3, [sp, #16]
 80019d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80019da:	2206      	movs	r2, #6
 80019dc:	4826      	ldr	r0, [pc, #152]	; (8001a78 <_svfiprintf_r+0x1f4>)
 80019de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80019e2:	f000 f9e5 	bl	8001db0 <memchr>
 80019e6:	2800      	cmp	r0, #0
 80019e8:	d038      	beq.n	8001a5c <_svfiprintf_r+0x1d8>
 80019ea:	4b24      	ldr	r3, [pc, #144]	; (8001a7c <_svfiprintf_r+0x1f8>)
 80019ec:	bb1b      	cbnz	r3, 8001a36 <_svfiprintf_r+0x1b2>
 80019ee:	9b03      	ldr	r3, [sp, #12]
 80019f0:	3307      	adds	r3, #7
 80019f2:	f023 0307 	bic.w	r3, r3, #7
 80019f6:	3308      	adds	r3, #8
 80019f8:	9303      	str	r3, [sp, #12]
 80019fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80019fc:	4433      	add	r3, r6
 80019fe:	9309      	str	r3, [sp, #36]	; 0x24
 8001a00:	e767      	b.n	80018d2 <_svfiprintf_r+0x4e>
 8001a02:	460c      	mov	r4, r1
 8001a04:	2001      	movs	r0, #1
 8001a06:	fb0c 3202 	mla	r2, ip, r2, r3
 8001a0a:	e7a5      	b.n	8001958 <_svfiprintf_r+0xd4>
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	f04f 0c0a 	mov.w	ip, #10
 8001a12:	4619      	mov	r1, r3
 8001a14:	3401      	adds	r4, #1
 8001a16:	9305      	str	r3, [sp, #20]
 8001a18:	4620      	mov	r0, r4
 8001a1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001a1e:	3a30      	subs	r2, #48	; 0x30
 8001a20:	2a09      	cmp	r2, #9
 8001a22:	d903      	bls.n	8001a2c <_svfiprintf_r+0x1a8>
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d0c5      	beq.n	80019b4 <_svfiprintf_r+0x130>
 8001a28:	9105      	str	r1, [sp, #20]
 8001a2a:	e7c3      	b.n	80019b4 <_svfiprintf_r+0x130>
 8001a2c:	4604      	mov	r4, r0
 8001a2e:	2301      	movs	r3, #1
 8001a30:	fb0c 2101 	mla	r1, ip, r1, r2
 8001a34:	e7f0      	b.n	8001a18 <_svfiprintf_r+0x194>
 8001a36:	ab03      	add	r3, sp, #12
 8001a38:	9300      	str	r3, [sp, #0]
 8001a3a:	462a      	mov	r2, r5
 8001a3c:	4638      	mov	r0, r7
 8001a3e:	4b10      	ldr	r3, [pc, #64]	; (8001a80 <_svfiprintf_r+0x1fc>)
 8001a40:	a904      	add	r1, sp, #16
 8001a42:	f3af 8000 	nop.w
 8001a46:	1c42      	adds	r2, r0, #1
 8001a48:	4606      	mov	r6, r0
 8001a4a:	d1d6      	bne.n	80019fa <_svfiprintf_r+0x176>
 8001a4c:	89ab      	ldrh	r3, [r5, #12]
 8001a4e:	065b      	lsls	r3, r3, #25
 8001a50:	f53f af2c 	bmi.w	80018ac <_svfiprintf_r+0x28>
 8001a54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001a56:	b01d      	add	sp, #116	; 0x74
 8001a58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a5c:	ab03      	add	r3, sp, #12
 8001a5e:	9300      	str	r3, [sp, #0]
 8001a60:	462a      	mov	r2, r5
 8001a62:	4638      	mov	r0, r7
 8001a64:	4b06      	ldr	r3, [pc, #24]	; (8001a80 <_svfiprintf_r+0x1fc>)
 8001a66:	a904      	add	r1, sp, #16
 8001a68:	f000 f87c 	bl	8001b64 <_printf_i>
 8001a6c:	e7eb      	b.n	8001a46 <_svfiprintf_r+0x1c2>
 8001a6e:	bf00      	nop
 8001a70:	080020da 	.word	0x080020da
 8001a74:	080020e0 	.word	0x080020e0
 8001a78:	080020e4 	.word	0x080020e4
 8001a7c:	00000000 	.word	0x00000000
 8001a80:	080017cd 	.word	0x080017cd

08001a84 <_printf_common>:
 8001a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a88:	4616      	mov	r6, r2
 8001a8a:	4699      	mov	r9, r3
 8001a8c:	688a      	ldr	r2, [r1, #8]
 8001a8e:	690b      	ldr	r3, [r1, #16]
 8001a90:	4607      	mov	r7, r0
 8001a92:	4293      	cmp	r3, r2
 8001a94:	bfb8      	it	lt
 8001a96:	4613      	movlt	r3, r2
 8001a98:	6033      	str	r3, [r6, #0]
 8001a9a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001a9e:	460c      	mov	r4, r1
 8001aa0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001aa4:	b10a      	cbz	r2, 8001aaa <_printf_common+0x26>
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	6033      	str	r3, [r6, #0]
 8001aaa:	6823      	ldr	r3, [r4, #0]
 8001aac:	0699      	lsls	r1, r3, #26
 8001aae:	bf42      	ittt	mi
 8001ab0:	6833      	ldrmi	r3, [r6, #0]
 8001ab2:	3302      	addmi	r3, #2
 8001ab4:	6033      	strmi	r3, [r6, #0]
 8001ab6:	6825      	ldr	r5, [r4, #0]
 8001ab8:	f015 0506 	ands.w	r5, r5, #6
 8001abc:	d106      	bne.n	8001acc <_printf_common+0x48>
 8001abe:	f104 0a19 	add.w	sl, r4, #25
 8001ac2:	68e3      	ldr	r3, [r4, #12]
 8001ac4:	6832      	ldr	r2, [r6, #0]
 8001ac6:	1a9b      	subs	r3, r3, r2
 8001ac8:	42ab      	cmp	r3, r5
 8001aca:	dc28      	bgt.n	8001b1e <_printf_common+0x9a>
 8001acc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001ad0:	1e13      	subs	r3, r2, #0
 8001ad2:	6822      	ldr	r2, [r4, #0]
 8001ad4:	bf18      	it	ne
 8001ad6:	2301      	movne	r3, #1
 8001ad8:	0692      	lsls	r2, r2, #26
 8001ada:	d42d      	bmi.n	8001b38 <_printf_common+0xb4>
 8001adc:	4649      	mov	r1, r9
 8001ade:	4638      	mov	r0, r7
 8001ae0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001ae4:	47c0      	blx	r8
 8001ae6:	3001      	adds	r0, #1
 8001ae8:	d020      	beq.n	8001b2c <_printf_common+0xa8>
 8001aea:	6823      	ldr	r3, [r4, #0]
 8001aec:	68e5      	ldr	r5, [r4, #12]
 8001aee:	f003 0306 	and.w	r3, r3, #6
 8001af2:	2b04      	cmp	r3, #4
 8001af4:	bf18      	it	ne
 8001af6:	2500      	movne	r5, #0
 8001af8:	6832      	ldr	r2, [r6, #0]
 8001afa:	f04f 0600 	mov.w	r6, #0
 8001afe:	68a3      	ldr	r3, [r4, #8]
 8001b00:	bf08      	it	eq
 8001b02:	1aad      	subeq	r5, r5, r2
 8001b04:	6922      	ldr	r2, [r4, #16]
 8001b06:	bf08      	it	eq
 8001b08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	bfc4      	itt	gt
 8001b10:	1a9b      	subgt	r3, r3, r2
 8001b12:	18ed      	addgt	r5, r5, r3
 8001b14:	341a      	adds	r4, #26
 8001b16:	42b5      	cmp	r5, r6
 8001b18:	d11a      	bne.n	8001b50 <_printf_common+0xcc>
 8001b1a:	2000      	movs	r0, #0
 8001b1c:	e008      	b.n	8001b30 <_printf_common+0xac>
 8001b1e:	2301      	movs	r3, #1
 8001b20:	4652      	mov	r2, sl
 8001b22:	4649      	mov	r1, r9
 8001b24:	4638      	mov	r0, r7
 8001b26:	47c0      	blx	r8
 8001b28:	3001      	adds	r0, #1
 8001b2a:	d103      	bne.n	8001b34 <_printf_common+0xb0>
 8001b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b34:	3501      	adds	r5, #1
 8001b36:	e7c4      	b.n	8001ac2 <_printf_common+0x3e>
 8001b38:	2030      	movs	r0, #48	; 0x30
 8001b3a:	18e1      	adds	r1, r4, r3
 8001b3c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001b40:	1c5a      	adds	r2, r3, #1
 8001b42:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001b46:	4422      	add	r2, r4
 8001b48:	3302      	adds	r3, #2
 8001b4a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001b4e:	e7c5      	b.n	8001adc <_printf_common+0x58>
 8001b50:	2301      	movs	r3, #1
 8001b52:	4622      	mov	r2, r4
 8001b54:	4649      	mov	r1, r9
 8001b56:	4638      	mov	r0, r7
 8001b58:	47c0      	blx	r8
 8001b5a:	3001      	adds	r0, #1
 8001b5c:	d0e6      	beq.n	8001b2c <_printf_common+0xa8>
 8001b5e:	3601      	adds	r6, #1
 8001b60:	e7d9      	b.n	8001b16 <_printf_common+0x92>
	...

08001b64 <_printf_i>:
 8001b64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001b68:	7e0f      	ldrb	r7, [r1, #24]
 8001b6a:	4691      	mov	r9, r2
 8001b6c:	2f78      	cmp	r7, #120	; 0x78
 8001b6e:	4680      	mov	r8, r0
 8001b70:	460c      	mov	r4, r1
 8001b72:	469a      	mov	sl, r3
 8001b74:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001b76:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001b7a:	d807      	bhi.n	8001b8c <_printf_i+0x28>
 8001b7c:	2f62      	cmp	r7, #98	; 0x62
 8001b7e:	d80a      	bhi.n	8001b96 <_printf_i+0x32>
 8001b80:	2f00      	cmp	r7, #0
 8001b82:	f000 80d9 	beq.w	8001d38 <_printf_i+0x1d4>
 8001b86:	2f58      	cmp	r7, #88	; 0x58
 8001b88:	f000 80a4 	beq.w	8001cd4 <_printf_i+0x170>
 8001b8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001b90:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001b94:	e03a      	b.n	8001c0c <_printf_i+0xa8>
 8001b96:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001b9a:	2b15      	cmp	r3, #21
 8001b9c:	d8f6      	bhi.n	8001b8c <_printf_i+0x28>
 8001b9e:	a101      	add	r1, pc, #4	; (adr r1, 8001ba4 <_printf_i+0x40>)
 8001ba0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001ba4:	08001bfd 	.word	0x08001bfd
 8001ba8:	08001c11 	.word	0x08001c11
 8001bac:	08001b8d 	.word	0x08001b8d
 8001bb0:	08001b8d 	.word	0x08001b8d
 8001bb4:	08001b8d 	.word	0x08001b8d
 8001bb8:	08001b8d 	.word	0x08001b8d
 8001bbc:	08001c11 	.word	0x08001c11
 8001bc0:	08001b8d 	.word	0x08001b8d
 8001bc4:	08001b8d 	.word	0x08001b8d
 8001bc8:	08001b8d 	.word	0x08001b8d
 8001bcc:	08001b8d 	.word	0x08001b8d
 8001bd0:	08001d1f 	.word	0x08001d1f
 8001bd4:	08001c41 	.word	0x08001c41
 8001bd8:	08001d01 	.word	0x08001d01
 8001bdc:	08001b8d 	.word	0x08001b8d
 8001be0:	08001b8d 	.word	0x08001b8d
 8001be4:	08001d41 	.word	0x08001d41
 8001be8:	08001b8d 	.word	0x08001b8d
 8001bec:	08001c41 	.word	0x08001c41
 8001bf0:	08001b8d 	.word	0x08001b8d
 8001bf4:	08001b8d 	.word	0x08001b8d
 8001bf8:	08001d09 	.word	0x08001d09
 8001bfc:	682b      	ldr	r3, [r5, #0]
 8001bfe:	1d1a      	adds	r2, r3, #4
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	602a      	str	r2, [r5, #0]
 8001c04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001c08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e0a4      	b.n	8001d5a <_printf_i+0x1f6>
 8001c10:	6820      	ldr	r0, [r4, #0]
 8001c12:	6829      	ldr	r1, [r5, #0]
 8001c14:	0606      	lsls	r6, r0, #24
 8001c16:	f101 0304 	add.w	r3, r1, #4
 8001c1a:	d50a      	bpl.n	8001c32 <_printf_i+0xce>
 8001c1c:	680e      	ldr	r6, [r1, #0]
 8001c1e:	602b      	str	r3, [r5, #0]
 8001c20:	2e00      	cmp	r6, #0
 8001c22:	da03      	bge.n	8001c2c <_printf_i+0xc8>
 8001c24:	232d      	movs	r3, #45	; 0x2d
 8001c26:	4276      	negs	r6, r6
 8001c28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001c2c:	230a      	movs	r3, #10
 8001c2e:	485e      	ldr	r0, [pc, #376]	; (8001da8 <_printf_i+0x244>)
 8001c30:	e019      	b.n	8001c66 <_printf_i+0x102>
 8001c32:	680e      	ldr	r6, [r1, #0]
 8001c34:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001c38:	602b      	str	r3, [r5, #0]
 8001c3a:	bf18      	it	ne
 8001c3c:	b236      	sxthne	r6, r6
 8001c3e:	e7ef      	b.n	8001c20 <_printf_i+0xbc>
 8001c40:	682b      	ldr	r3, [r5, #0]
 8001c42:	6820      	ldr	r0, [r4, #0]
 8001c44:	1d19      	adds	r1, r3, #4
 8001c46:	6029      	str	r1, [r5, #0]
 8001c48:	0601      	lsls	r1, r0, #24
 8001c4a:	d501      	bpl.n	8001c50 <_printf_i+0xec>
 8001c4c:	681e      	ldr	r6, [r3, #0]
 8001c4e:	e002      	b.n	8001c56 <_printf_i+0xf2>
 8001c50:	0646      	lsls	r6, r0, #25
 8001c52:	d5fb      	bpl.n	8001c4c <_printf_i+0xe8>
 8001c54:	881e      	ldrh	r6, [r3, #0]
 8001c56:	2f6f      	cmp	r7, #111	; 0x6f
 8001c58:	bf0c      	ite	eq
 8001c5a:	2308      	moveq	r3, #8
 8001c5c:	230a      	movne	r3, #10
 8001c5e:	4852      	ldr	r0, [pc, #328]	; (8001da8 <_printf_i+0x244>)
 8001c60:	2100      	movs	r1, #0
 8001c62:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001c66:	6865      	ldr	r5, [r4, #4]
 8001c68:	2d00      	cmp	r5, #0
 8001c6a:	bfa8      	it	ge
 8001c6c:	6821      	ldrge	r1, [r4, #0]
 8001c6e:	60a5      	str	r5, [r4, #8]
 8001c70:	bfa4      	itt	ge
 8001c72:	f021 0104 	bicge.w	r1, r1, #4
 8001c76:	6021      	strge	r1, [r4, #0]
 8001c78:	b90e      	cbnz	r6, 8001c7e <_printf_i+0x11a>
 8001c7a:	2d00      	cmp	r5, #0
 8001c7c:	d04d      	beq.n	8001d1a <_printf_i+0x1b6>
 8001c7e:	4615      	mov	r5, r2
 8001c80:	fbb6 f1f3 	udiv	r1, r6, r3
 8001c84:	fb03 6711 	mls	r7, r3, r1, r6
 8001c88:	5dc7      	ldrb	r7, [r0, r7]
 8001c8a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001c8e:	4637      	mov	r7, r6
 8001c90:	42bb      	cmp	r3, r7
 8001c92:	460e      	mov	r6, r1
 8001c94:	d9f4      	bls.n	8001c80 <_printf_i+0x11c>
 8001c96:	2b08      	cmp	r3, #8
 8001c98:	d10b      	bne.n	8001cb2 <_printf_i+0x14e>
 8001c9a:	6823      	ldr	r3, [r4, #0]
 8001c9c:	07de      	lsls	r6, r3, #31
 8001c9e:	d508      	bpl.n	8001cb2 <_printf_i+0x14e>
 8001ca0:	6923      	ldr	r3, [r4, #16]
 8001ca2:	6861      	ldr	r1, [r4, #4]
 8001ca4:	4299      	cmp	r1, r3
 8001ca6:	bfde      	ittt	le
 8001ca8:	2330      	movle	r3, #48	; 0x30
 8001caa:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001cae:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001cb2:	1b52      	subs	r2, r2, r5
 8001cb4:	6122      	str	r2, [r4, #16]
 8001cb6:	464b      	mov	r3, r9
 8001cb8:	4621      	mov	r1, r4
 8001cba:	4640      	mov	r0, r8
 8001cbc:	f8cd a000 	str.w	sl, [sp]
 8001cc0:	aa03      	add	r2, sp, #12
 8001cc2:	f7ff fedf 	bl	8001a84 <_printf_common>
 8001cc6:	3001      	adds	r0, #1
 8001cc8:	d14c      	bne.n	8001d64 <_printf_i+0x200>
 8001cca:	f04f 30ff 	mov.w	r0, #4294967295
 8001cce:	b004      	add	sp, #16
 8001cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001cd4:	4834      	ldr	r0, [pc, #208]	; (8001da8 <_printf_i+0x244>)
 8001cd6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8001cda:	6829      	ldr	r1, [r5, #0]
 8001cdc:	6823      	ldr	r3, [r4, #0]
 8001cde:	f851 6b04 	ldr.w	r6, [r1], #4
 8001ce2:	6029      	str	r1, [r5, #0]
 8001ce4:	061d      	lsls	r5, r3, #24
 8001ce6:	d514      	bpl.n	8001d12 <_printf_i+0x1ae>
 8001ce8:	07df      	lsls	r7, r3, #31
 8001cea:	bf44      	itt	mi
 8001cec:	f043 0320 	orrmi.w	r3, r3, #32
 8001cf0:	6023      	strmi	r3, [r4, #0]
 8001cf2:	b91e      	cbnz	r6, 8001cfc <_printf_i+0x198>
 8001cf4:	6823      	ldr	r3, [r4, #0]
 8001cf6:	f023 0320 	bic.w	r3, r3, #32
 8001cfa:	6023      	str	r3, [r4, #0]
 8001cfc:	2310      	movs	r3, #16
 8001cfe:	e7af      	b.n	8001c60 <_printf_i+0xfc>
 8001d00:	6823      	ldr	r3, [r4, #0]
 8001d02:	f043 0320 	orr.w	r3, r3, #32
 8001d06:	6023      	str	r3, [r4, #0]
 8001d08:	2378      	movs	r3, #120	; 0x78
 8001d0a:	4828      	ldr	r0, [pc, #160]	; (8001dac <_printf_i+0x248>)
 8001d0c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001d10:	e7e3      	b.n	8001cda <_printf_i+0x176>
 8001d12:	0659      	lsls	r1, r3, #25
 8001d14:	bf48      	it	mi
 8001d16:	b2b6      	uxthmi	r6, r6
 8001d18:	e7e6      	b.n	8001ce8 <_printf_i+0x184>
 8001d1a:	4615      	mov	r5, r2
 8001d1c:	e7bb      	b.n	8001c96 <_printf_i+0x132>
 8001d1e:	682b      	ldr	r3, [r5, #0]
 8001d20:	6826      	ldr	r6, [r4, #0]
 8001d22:	1d18      	adds	r0, r3, #4
 8001d24:	6961      	ldr	r1, [r4, #20]
 8001d26:	6028      	str	r0, [r5, #0]
 8001d28:	0635      	lsls	r5, r6, #24
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	d501      	bpl.n	8001d32 <_printf_i+0x1ce>
 8001d2e:	6019      	str	r1, [r3, #0]
 8001d30:	e002      	b.n	8001d38 <_printf_i+0x1d4>
 8001d32:	0670      	lsls	r0, r6, #25
 8001d34:	d5fb      	bpl.n	8001d2e <_printf_i+0x1ca>
 8001d36:	8019      	strh	r1, [r3, #0]
 8001d38:	2300      	movs	r3, #0
 8001d3a:	4615      	mov	r5, r2
 8001d3c:	6123      	str	r3, [r4, #16]
 8001d3e:	e7ba      	b.n	8001cb6 <_printf_i+0x152>
 8001d40:	682b      	ldr	r3, [r5, #0]
 8001d42:	2100      	movs	r1, #0
 8001d44:	1d1a      	adds	r2, r3, #4
 8001d46:	602a      	str	r2, [r5, #0]
 8001d48:	681d      	ldr	r5, [r3, #0]
 8001d4a:	6862      	ldr	r2, [r4, #4]
 8001d4c:	4628      	mov	r0, r5
 8001d4e:	f000 f82f 	bl	8001db0 <memchr>
 8001d52:	b108      	cbz	r0, 8001d58 <_printf_i+0x1f4>
 8001d54:	1b40      	subs	r0, r0, r5
 8001d56:	6060      	str	r0, [r4, #4]
 8001d58:	6863      	ldr	r3, [r4, #4]
 8001d5a:	6123      	str	r3, [r4, #16]
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001d62:	e7a8      	b.n	8001cb6 <_printf_i+0x152>
 8001d64:	462a      	mov	r2, r5
 8001d66:	4649      	mov	r1, r9
 8001d68:	4640      	mov	r0, r8
 8001d6a:	6923      	ldr	r3, [r4, #16]
 8001d6c:	47d0      	blx	sl
 8001d6e:	3001      	adds	r0, #1
 8001d70:	d0ab      	beq.n	8001cca <_printf_i+0x166>
 8001d72:	6823      	ldr	r3, [r4, #0]
 8001d74:	079b      	lsls	r3, r3, #30
 8001d76:	d413      	bmi.n	8001da0 <_printf_i+0x23c>
 8001d78:	68e0      	ldr	r0, [r4, #12]
 8001d7a:	9b03      	ldr	r3, [sp, #12]
 8001d7c:	4298      	cmp	r0, r3
 8001d7e:	bfb8      	it	lt
 8001d80:	4618      	movlt	r0, r3
 8001d82:	e7a4      	b.n	8001cce <_printf_i+0x16a>
 8001d84:	2301      	movs	r3, #1
 8001d86:	4632      	mov	r2, r6
 8001d88:	4649      	mov	r1, r9
 8001d8a:	4640      	mov	r0, r8
 8001d8c:	47d0      	blx	sl
 8001d8e:	3001      	adds	r0, #1
 8001d90:	d09b      	beq.n	8001cca <_printf_i+0x166>
 8001d92:	3501      	adds	r5, #1
 8001d94:	68e3      	ldr	r3, [r4, #12]
 8001d96:	9903      	ldr	r1, [sp, #12]
 8001d98:	1a5b      	subs	r3, r3, r1
 8001d9a:	42ab      	cmp	r3, r5
 8001d9c:	dcf2      	bgt.n	8001d84 <_printf_i+0x220>
 8001d9e:	e7eb      	b.n	8001d78 <_printf_i+0x214>
 8001da0:	2500      	movs	r5, #0
 8001da2:	f104 0619 	add.w	r6, r4, #25
 8001da6:	e7f5      	b.n	8001d94 <_printf_i+0x230>
 8001da8:	080020eb 	.word	0x080020eb
 8001dac:	080020fc 	.word	0x080020fc

08001db0 <memchr>:
 8001db0:	4603      	mov	r3, r0
 8001db2:	b510      	push	{r4, lr}
 8001db4:	b2c9      	uxtb	r1, r1
 8001db6:	4402      	add	r2, r0
 8001db8:	4293      	cmp	r3, r2
 8001dba:	4618      	mov	r0, r3
 8001dbc:	d101      	bne.n	8001dc2 <memchr+0x12>
 8001dbe:	2000      	movs	r0, #0
 8001dc0:	e003      	b.n	8001dca <memchr+0x1a>
 8001dc2:	7804      	ldrb	r4, [r0, #0]
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	428c      	cmp	r4, r1
 8001dc8:	d1f6      	bne.n	8001db8 <memchr+0x8>
 8001dca:	bd10      	pop	{r4, pc}

08001dcc <memcpy>:
 8001dcc:	440a      	add	r2, r1
 8001dce:	4291      	cmp	r1, r2
 8001dd0:	f100 33ff 	add.w	r3, r0, #4294967295
 8001dd4:	d100      	bne.n	8001dd8 <memcpy+0xc>
 8001dd6:	4770      	bx	lr
 8001dd8:	b510      	push	{r4, lr}
 8001dda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001dde:	4291      	cmp	r1, r2
 8001de0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001de4:	d1f9      	bne.n	8001dda <memcpy+0xe>
 8001de6:	bd10      	pop	{r4, pc}

08001de8 <memmove>:
 8001de8:	4288      	cmp	r0, r1
 8001dea:	b510      	push	{r4, lr}
 8001dec:	eb01 0402 	add.w	r4, r1, r2
 8001df0:	d902      	bls.n	8001df8 <memmove+0x10>
 8001df2:	4284      	cmp	r4, r0
 8001df4:	4623      	mov	r3, r4
 8001df6:	d807      	bhi.n	8001e08 <memmove+0x20>
 8001df8:	1e43      	subs	r3, r0, #1
 8001dfa:	42a1      	cmp	r1, r4
 8001dfc:	d008      	beq.n	8001e10 <memmove+0x28>
 8001dfe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001e02:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001e06:	e7f8      	b.n	8001dfa <memmove+0x12>
 8001e08:	4601      	mov	r1, r0
 8001e0a:	4402      	add	r2, r0
 8001e0c:	428a      	cmp	r2, r1
 8001e0e:	d100      	bne.n	8001e12 <memmove+0x2a>
 8001e10:	bd10      	pop	{r4, pc}
 8001e12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001e16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001e1a:	e7f7      	b.n	8001e0c <memmove+0x24>

08001e1c <_free_r>:
 8001e1c:	b538      	push	{r3, r4, r5, lr}
 8001e1e:	4605      	mov	r5, r0
 8001e20:	2900      	cmp	r1, #0
 8001e22:	d040      	beq.n	8001ea6 <_free_r+0x8a>
 8001e24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001e28:	1f0c      	subs	r4, r1, #4
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	bfb8      	it	lt
 8001e2e:	18e4      	addlt	r4, r4, r3
 8001e30:	f000 f910 	bl	8002054 <__malloc_lock>
 8001e34:	4a1c      	ldr	r2, [pc, #112]	; (8001ea8 <_free_r+0x8c>)
 8001e36:	6813      	ldr	r3, [r2, #0]
 8001e38:	b933      	cbnz	r3, 8001e48 <_free_r+0x2c>
 8001e3a:	6063      	str	r3, [r4, #4]
 8001e3c:	6014      	str	r4, [r2, #0]
 8001e3e:	4628      	mov	r0, r5
 8001e40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001e44:	f000 b90c 	b.w	8002060 <__malloc_unlock>
 8001e48:	42a3      	cmp	r3, r4
 8001e4a:	d908      	bls.n	8001e5e <_free_r+0x42>
 8001e4c:	6820      	ldr	r0, [r4, #0]
 8001e4e:	1821      	adds	r1, r4, r0
 8001e50:	428b      	cmp	r3, r1
 8001e52:	bf01      	itttt	eq
 8001e54:	6819      	ldreq	r1, [r3, #0]
 8001e56:	685b      	ldreq	r3, [r3, #4]
 8001e58:	1809      	addeq	r1, r1, r0
 8001e5a:	6021      	streq	r1, [r4, #0]
 8001e5c:	e7ed      	b.n	8001e3a <_free_r+0x1e>
 8001e5e:	461a      	mov	r2, r3
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	b10b      	cbz	r3, 8001e68 <_free_r+0x4c>
 8001e64:	42a3      	cmp	r3, r4
 8001e66:	d9fa      	bls.n	8001e5e <_free_r+0x42>
 8001e68:	6811      	ldr	r1, [r2, #0]
 8001e6a:	1850      	adds	r0, r2, r1
 8001e6c:	42a0      	cmp	r0, r4
 8001e6e:	d10b      	bne.n	8001e88 <_free_r+0x6c>
 8001e70:	6820      	ldr	r0, [r4, #0]
 8001e72:	4401      	add	r1, r0
 8001e74:	1850      	adds	r0, r2, r1
 8001e76:	4283      	cmp	r3, r0
 8001e78:	6011      	str	r1, [r2, #0]
 8001e7a:	d1e0      	bne.n	8001e3e <_free_r+0x22>
 8001e7c:	6818      	ldr	r0, [r3, #0]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	4401      	add	r1, r0
 8001e82:	6011      	str	r1, [r2, #0]
 8001e84:	6053      	str	r3, [r2, #4]
 8001e86:	e7da      	b.n	8001e3e <_free_r+0x22>
 8001e88:	d902      	bls.n	8001e90 <_free_r+0x74>
 8001e8a:	230c      	movs	r3, #12
 8001e8c:	602b      	str	r3, [r5, #0]
 8001e8e:	e7d6      	b.n	8001e3e <_free_r+0x22>
 8001e90:	6820      	ldr	r0, [r4, #0]
 8001e92:	1821      	adds	r1, r4, r0
 8001e94:	428b      	cmp	r3, r1
 8001e96:	bf01      	itttt	eq
 8001e98:	6819      	ldreq	r1, [r3, #0]
 8001e9a:	685b      	ldreq	r3, [r3, #4]
 8001e9c:	1809      	addeq	r1, r1, r0
 8001e9e:	6021      	streq	r1, [r4, #0]
 8001ea0:	6063      	str	r3, [r4, #4]
 8001ea2:	6054      	str	r4, [r2, #4]
 8001ea4:	e7cb      	b.n	8001e3e <_free_r+0x22>
 8001ea6:	bd38      	pop	{r3, r4, r5, pc}
 8001ea8:	200000c8 	.word	0x200000c8

08001eac <sbrk_aligned>:
 8001eac:	b570      	push	{r4, r5, r6, lr}
 8001eae:	4e0e      	ldr	r6, [pc, #56]	; (8001ee8 <sbrk_aligned+0x3c>)
 8001eb0:	460c      	mov	r4, r1
 8001eb2:	6831      	ldr	r1, [r6, #0]
 8001eb4:	4605      	mov	r5, r0
 8001eb6:	b911      	cbnz	r1, 8001ebe <sbrk_aligned+0x12>
 8001eb8:	f000 f8bc 	bl	8002034 <_sbrk_r>
 8001ebc:	6030      	str	r0, [r6, #0]
 8001ebe:	4621      	mov	r1, r4
 8001ec0:	4628      	mov	r0, r5
 8001ec2:	f000 f8b7 	bl	8002034 <_sbrk_r>
 8001ec6:	1c43      	adds	r3, r0, #1
 8001ec8:	d00a      	beq.n	8001ee0 <sbrk_aligned+0x34>
 8001eca:	1cc4      	adds	r4, r0, #3
 8001ecc:	f024 0403 	bic.w	r4, r4, #3
 8001ed0:	42a0      	cmp	r0, r4
 8001ed2:	d007      	beq.n	8001ee4 <sbrk_aligned+0x38>
 8001ed4:	1a21      	subs	r1, r4, r0
 8001ed6:	4628      	mov	r0, r5
 8001ed8:	f000 f8ac 	bl	8002034 <_sbrk_r>
 8001edc:	3001      	adds	r0, #1
 8001ede:	d101      	bne.n	8001ee4 <sbrk_aligned+0x38>
 8001ee0:	f04f 34ff 	mov.w	r4, #4294967295
 8001ee4:	4620      	mov	r0, r4
 8001ee6:	bd70      	pop	{r4, r5, r6, pc}
 8001ee8:	200000cc 	.word	0x200000cc

08001eec <_malloc_r>:
 8001eec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ef0:	1ccd      	adds	r5, r1, #3
 8001ef2:	f025 0503 	bic.w	r5, r5, #3
 8001ef6:	3508      	adds	r5, #8
 8001ef8:	2d0c      	cmp	r5, #12
 8001efa:	bf38      	it	cc
 8001efc:	250c      	movcc	r5, #12
 8001efe:	2d00      	cmp	r5, #0
 8001f00:	4607      	mov	r7, r0
 8001f02:	db01      	blt.n	8001f08 <_malloc_r+0x1c>
 8001f04:	42a9      	cmp	r1, r5
 8001f06:	d905      	bls.n	8001f14 <_malloc_r+0x28>
 8001f08:	230c      	movs	r3, #12
 8001f0a:	2600      	movs	r6, #0
 8001f0c:	603b      	str	r3, [r7, #0]
 8001f0e:	4630      	mov	r0, r6
 8001f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001f14:	4e2e      	ldr	r6, [pc, #184]	; (8001fd0 <_malloc_r+0xe4>)
 8001f16:	f000 f89d 	bl	8002054 <__malloc_lock>
 8001f1a:	6833      	ldr	r3, [r6, #0]
 8001f1c:	461c      	mov	r4, r3
 8001f1e:	bb34      	cbnz	r4, 8001f6e <_malloc_r+0x82>
 8001f20:	4629      	mov	r1, r5
 8001f22:	4638      	mov	r0, r7
 8001f24:	f7ff ffc2 	bl	8001eac <sbrk_aligned>
 8001f28:	1c43      	adds	r3, r0, #1
 8001f2a:	4604      	mov	r4, r0
 8001f2c:	d14d      	bne.n	8001fca <_malloc_r+0xde>
 8001f2e:	6834      	ldr	r4, [r6, #0]
 8001f30:	4626      	mov	r6, r4
 8001f32:	2e00      	cmp	r6, #0
 8001f34:	d140      	bne.n	8001fb8 <_malloc_r+0xcc>
 8001f36:	6823      	ldr	r3, [r4, #0]
 8001f38:	4631      	mov	r1, r6
 8001f3a:	4638      	mov	r0, r7
 8001f3c:	eb04 0803 	add.w	r8, r4, r3
 8001f40:	f000 f878 	bl	8002034 <_sbrk_r>
 8001f44:	4580      	cmp	r8, r0
 8001f46:	d13a      	bne.n	8001fbe <_malloc_r+0xd2>
 8001f48:	6821      	ldr	r1, [r4, #0]
 8001f4a:	3503      	adds	r5, #3
 8001f4c:	1a6d      	subs	r5, r5, r1
 8001f4e:	f025 0503 	bic.w	r5, r5, #3
 8001f52:	3508      	adds	r5, #8
 8001f54:	2d0c      	cmp	r5, #12
 8001f56:	bf38      	it	cc
 8001f58:	250c      	movcc	r5, #12
 8001f5a:	4638      	mov	r0, r7
 8001f5c:	4629      	mov	r1, r5
 8001f5e:	f7ff ffa5 	bl	8001eac <sbrk_aligned>
 8001f62:	3001      	adds	r0, #1
 8001f64:	d02b      	beq.n	8001fbe <_malloc_r+0xd2>
 8001f66:	6823      	ldr	r3, [r4, #0]
 8001f68:	442b      	add	r3, r5
 8001f6a:	6023      	str	r3, [r4, #0]
 8001f6c:	e00e      	b.n	8001f8c <_malloc_r+0xa0>
 8001f6e:	6822      	ldr	r2, [r4, #0]
 8001f70:	1b52      	subs	r2, r2, r5
 8001f72:	d41e      	bmi.n	8001fb2 <_malloc_r+0xc6>
 8001f74:	2a0b      	cmp	r2, #11
 8001f76:	d916      	bls.n	8001fa6 <_malloc_r+0xba>
 8001f78:	1961      	adds	r1, r4, r5
 8001f7a:	42a3      	cmp	r3, r4
 8001f7c:	6025      	str	r5, [r4, #0]
 8001f7e:	bf18      	it	ne
 8001f80:	6059      	strne	r1, [r3, #4]
 8001f82:	6863      	ldr	r3, [r4, #4]
 8001f84:	bf08      	it	eq
 8001f86:	6031      	streq	r1, [r6, #0]
 8001f88:	5162      	str	r2, [r4, r5]
 8001f8a:	604b      	str	r3, [r1, #4]
 8001f8c:	4638      	mov	r0, r7
 8001f8e:	f104 060b 	add.w	r6, r4, #11
 8001f92:	f000 f865 	bl	8002060 <__malloc_unlock>
 8001f96:	f026 0607 	bic.w	r6, r6, #7
 8001f9a:	1d23      	adds	r3, r4, #4
 8001f9c:	1af2      	subs	r2, r6, r3
 8001f9e:	d0b6      	beq.n	8001f0e <_malloc_r+0x22>
 8001fa0:	1b9b      	subs	r3, r3, r6
 8001fa2:	50a3      	str	r3, [r4, r2]
 8001fa4:	e7b3      	b.n	8001f0e <_malloc_r+0x22>
 8001fa6:	6862      	ldr	r2, [r4, #4]
 8001fa8:	42a3      	cmp	r3, r4
 8001faa:	bf0c      	ite	eq
 8001fac:	6032      	streq	r2, [r6, #0]
 8001fae:	605a      	strne	r2, [r3, #4]
 8001fb0:	e7ec      	b.n	8001f8c <_malloc_r+0xa0>
 8001fb2:	4623      	mov	r3, r4
 8001fb4:	6864      	ldr	r4, [r4, #4]
 8001fb6:	e7b2      	b.n	8001f1e <_malloc_r+0x32>
 8001fb8:	4634      	mov	r4, r6
 8001fba:	6876      	ldr	r6, [r6, #4]
 8001fbc:	e7b9      	b.n	8001f32 <_malloc_r+0x46>
 8001fbe:	230c      	movs	r3, #12
 8001fc0:	4638      	mov	r0, r7
 8001fc2:	603b      	str	r3, [r7, #0]
 8001fc4:	f000 f84c 	bl	8002060 <__malloc_unlock>
 8001fc8:	e7a1      	b.n	8001f0e <_malloc_r+0x22>
 8001fca:	6025      	str	r5, [r4, #0]
 8001fcc:	e7de      	b.n	8001f8c <_malloc_r+0xa0>
 8001fce:	bf00      	nop
 8001fd0:	200000c8 	.word	0x200000c8

08001fd4 <_realloc_r>:
 8001fd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001fd8:	4680      	mov	r8, r0
 8001fda:	4614      	mov	r4, r2
 8001fdc:	460e      	mov	r6, r1
 8001fde:	b921      	cbnz	r1, 8001fea <_realloc_r+0x16>
 8001fe0:	4611      	mov	r1, r2
 8001fe2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001fe6:	f7ff bf81 	b.w	8001eec <_malloc_r>
 8001fea:	b92a      	cbnz	r2, 8001ff8 <_realloc_r+0x24>
 8001fec:	f7ff ff16 	bl	8001e1c <_free_r>
 8001ff0:	4625      	mov	r5, r4
 8001ff2:	4628      	mov	r0, r5
 8001ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001ff8:	f000 f838 	bl	800206c <_malloc_usable_size_r>
 8001ffc:	4284      	cmp	r4, r0
 8001ffe:	4607      	mov	r7, r0
 8002000:	d802      	bhi.n	8002008 <_realloc_r+0x34>
 8002002:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002006:	d812      	bhi.n	800202e <_realloc_r+0x5a>
 8002008:	4621      	mov	r1, r4
 800200a:	4640      	mov	r0, r8
 800200c:	f7ff ff6e 	bl	8001eec <_malloc_r>
 8002010:	4605      	mov	r5, r0
 8002012:	2800      	cmp	r0, #0
 8002014:	d0ed      	beq.n	8001ff2 <_realloc_r+0x1e>
 8002016:	42bc      	cmp	r4, r7
 8002018:	4622      	mov	r2, r4
 800201a:	4631      	mov	r1, r6
 800201c:	bf28      	it	cs
 800201e:	463a      	movcs	r2, r7
 8002020:	f7ff fed4 	bl	8001dcc <memcpy>
 8002024:	4631      	mov	r1, r6
 8002026:	4640      	mov	r0, r8
 8002028:	f7ff fef8 	bl	8001e1c <_free_r>
 800202c:	e7e1      	b.n	8001ff2 <_realloc_r+0x1e>
 800202e:	4635      	mov	r5, r6
 8002030:	e7df      	b.n	8001ff2 <_realloc_r+0x1e>
	...

08002034 <_sbrk_r>:
 8002034:	b538      	push	{r3, r4, r5, lr}
 8002036:	2300      	movs	r3, #0
 8002038:	4d05      	ldr	r5, [pc, #20]	; (8002050 <_sbrk_r+0x1c>)
 800203a:	4604      	mov	r4, r0
 800203c:	4608      	mov	r0, r1
 800203e:	602b      	str	r3, [r5, #0]
 8002040:	f7fe f9ca 	bl	80003d8 <_sbrk>
 8002044:	1c43      	adds	r3, r0, #1
 8002046:	d102      	bne.n	800204e <_sbrk_r+0x1a>
 8002048:	682b      	ldr	r3, [r5, #0]
 800204a:	b103      	cbz	r3, 800204e <_sbrk_r+0x1a>
 800204c:	6023      	str	r3, [r4, #0]
 800204e:	bd38      	pop	{r3, r4, r5, pc}
 8002050:	200000d0 	.word	0x200000d0

08002054 <__malloc_lock>:
 8002054:	4801      	ldr	r0, [pc, #4]	; (800205c <__malloc_lock+0x8>)
 8002056:	f000 b811 	b.w	800207c <__retarget_lock_acquire_recursive>
 800205a:	bf00      	nop
 800205c:	200000d4 	.word	0x200000d4

08002060 <__malloc_unlock>:
 8002060:	4801      	ldr	r0, [pc, #4]	; (8002068 <__malloc_unlock+0x8>)
 8002062:	f000 b80c 	b.w	800207e <__retarget_lock_release_recursive>
 8002066:	bf00      	nop
 8002068:	200000d4 	.word	0x200000d4

0800206c <_malloc_usable_size_r>:
 800206c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002070:	1f18      	subs	r0, r3, #4
 8002072:	2b00      	cmp	r3, #0
 8002074:	bfbc      	itt	lt
 8002076:	580b      	ldrlt	r3, [r1, r0]
 8002078:	18c0      	addlt	r0, r0, r3
 800207a:	4770      	bx	lr

0800207c <__retarget_lock_acquire_recursive>:
 800207c:	4770      	bx	lr

0800207e <__retarget_lock_release_recursive>:
 800207e:	4770      	bx	lr

08002080 <_init>:
 8002080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002082:	bf00      	nop
 8002084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002086:	bc08      	pop	{r3}
 8002088:	469e      	mov	lr, r3
 800208a:	4770      	bx	lr

0800208c <_fini>:
 800208c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800208e:	bf00      	nop
 8002090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002092:	bc08      	pop	{r3}
 8002094:	469e      	mov	lr, r3
 8002096:	4770      	bx	lr
